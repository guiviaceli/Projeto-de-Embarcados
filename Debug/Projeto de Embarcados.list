
Projeto de Embarcados.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096d4  080096d4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080096d4  080096d4  000196d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096dc  080096dc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096dc  080096dc  000196dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080096e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001478  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200014ec  200014ec  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eda9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000417d  00000000  00000000  0003ee4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00042fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001780  00000000  00000000  000448f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000058fb  00000000  00000000  00046078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2b9  00000000  00000000  0004b973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3c6e  00000000  00000000  00067c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b89a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006de0  00000000  00000000  0015b8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800961c 	.word	0x0800961c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800961c 	.word	0x0800961c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fbea 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9d8 	bl	80008b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f9b6 	bl	8000874 <MX_DMA_Init>
  MX_ADC1_Init();
 8000508:	f000 f882 	bl	8000610 <MX_ADC1_Init>
  MX_TIM2_Init();
 800050c:	f000 f8d2 	bl	80006b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000510:	f000 f91c 	bl	800074c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4808      	ldr	r0, [pc, #32]	; (8000538 <main+0x44>)
 8000518:	f003 fa0a 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800051c:	2104      	movs	r1, #4
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x44>)
 8000520:	f003 fa06 	bl	8003930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000524:	2108      	movs	r1, #8
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x44>)
 8000528:	f003 fa02 	bl	8003930 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f006 fa3e 	bl	80069ac <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000530:	f006 fa60 	bl	80069f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x40>
 8000536:	bf00      	nop
 8000538:	20000180 	.word	0x20000180

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f008 ff9c 	bl	8009488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b4:	2348      	movs	r3, #72	; 0x48
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005bc:	2303      	movs	r3, #3
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fc9b 	bl	8002f00 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 f9d0 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2102      	movs	r1, #2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fefd 	bl	80033f0 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f9ba 	bl	8000974 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <MX_ADC1_Init+0xa0>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_ADC1_Init+0x9c>)
 800062a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_ADC1_Init+0x9c>)
 800063e:	2200      	movs	r2, #0
 8000640:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_ADC1_Init+0x9c>)
 800064c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000654:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_ADC1_Init+0x9c>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000662:	2201      	movs	r2, #1
 8000664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000670:	2201      	movs	r2, #1
 8000672:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000676:	f000 fb9d 	bl	8000db4 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000680:	f000 f978 	bl	8000974 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000696:	f000 fbd1 	bl	8000e3c <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006a0:	f000 f968 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000090 	.word	0x20000090
 80006b0:	40012000 	.word	0x40012000

080006b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_TIM2_Init+0x94>)
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_TIM2_Init+0x94>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_TIM2_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 949;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_TIM2_Init+0x94>)
 80006e6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80006ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_TIM2_Init+0x94>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_TIM2_Init+0x94>)
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <MX_TIM2_Init+0x94>)
 80006fa:	f003 f871 	bl	80037e0 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000704:	f000 f936 	bl	8000974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_TIM2_Init+0x94>)
 8000716:	f003 fa95 	bl	8003c44 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 f928 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000724:	2320      	movs	r3, #32
 8000726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_TIM2_Init+0x94>)
 8000732:	f003 fe5f 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800073c:	f000 f91a 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000138 	.word	0x20000138

0800074c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077c:	4b3b      	ldr	r3, [pc, #236]	; (800086c <MX_TIM3_Init+0x120>)
 800077e:	4a3c      	ldr	r2, [pc, #240]	; (8000870 <MX_TIM3_Init+0x124>)
 8000780:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8000782:	4b3a      	ldr	r3, [pc, #232]	; (800086c <MX_TIM3_Init+0x120>)
 8000784:	2214      	movs	r2, #20
 8000786:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b38      	ldr	r3, [pc, #224]	; (800086c <MX_TIM3_Init+0x120>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800078e:	4b37      	ldr	r3, [pc, #220]	; (800086c <MX_TIM3_Init+0x120>)
 8000790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000794:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <MX_TIM3_Init+0x120>)
 8000798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_TIM3_Init+0x120>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007a4:	4831      	ldr	r0, [pc, #196]	; (800086c <MX_TIM3_Init+0x120>)
 80007a6:	f003 f81b 	bl	80037e0 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007b0:	f000 f8e0 	bl	8000974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	4619      	mov	r1, r3
 80007c0:	482a      	ldr	r0, [pc, #168]	; (800086c <MX_TIM3_Init+0x120>)
 80007c2:	f003 fa3f 	bl	8003c44 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80007cc:	f000 f8d2 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007d0:	4826      	ldr	r0, [pc, #152]	; (800086c <MX_TIM3_Init+0x120>)
 80007d2:	f003 f854 	bl	800387e <HAL_TIM_PWM_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80007dc:	f000 f8ca 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4619      	mov	r1, r3
 80007ee:	481f      	ldr	r0, [pc, #124]	; (800086c <MX_TIM3_Init+0x120>)
 80007f0:	f003 fe00 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f000 f8bb 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fe:	2360      	movs	r3, #96	; 0x60
 8000800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 8000802:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <MX_TIM3_Init+0x120>)
 8000818:	f003 f952 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000822:	f000 f8a7 	bl	8000974 <Error_Handler>
  }
  sConfigOC.Pulse = 32700;
 8000826:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2204      	movs	r2, #4
 8000830:	4619      	mov	r1, r3
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <MX_TIM3_Init+0x120>)
 8000834:	f003 f944 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800083e:	f000 f899 	bl	8000974 <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 8000842:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2208      	movs	r2, #8
 800084c:	4619      	mov	r1, r3
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM3_Init+0x120>)
 8000850:	f003 f936 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800085a:	f000 f88b 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM3_Init+0x120>)
 8000860:	f000 f968 	bl	8000b34 <HAL_TIM_MspPostInit>

}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	; 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000180 	.word	0x20000180
 8000870:	40000400 	.word	0x40000400

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000884:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x3c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	2038      	movs	r0, #56	; 0x38
 800089c:	f000 fdd7 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008a0:	2038      	movs	r0, #56	; 0x38
 80008a2:	f000 fdf0 	bl	8001486 <HAL_NVIC_EnableIRQ>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a26      	ldr	r2, [pc, #152]	; (800096c <MX_GPIO_Init+0xb8>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <MX_GPIO_Init+0xb8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_GPIO_Init+0xb8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <MX_GPIO_Init+0xb8>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_GPIO_Init+0xb8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_GPIO_Init+0xb8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <MX_GPIO_Init+0xb8>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_GPIO_Init+0xb8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_GPIO_Init+0xb8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <MX_GPIO_Init+0xb8>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_GPIO_Init+0xb8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0xbc>)
 8000942:	f001 fa51 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000946:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0xbc>)
 8000960:	f001 f896 	bl	8001a90 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40021800 	.word	0x40021800

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <HAL_MspInit+0x54>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_MspInit+0x54>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
 80009c6:	f000 fd42 	bl	800144e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <HAL_ADC_MspInit+0xdc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d157      	bne.n	8000aaa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <HAL_ADC_MspInit+0xe0>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a2d      	ldr	r2, [pc, #180]	; (8000ab8 <HAL_ADC_MspInit+0xe0>)
 8000a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <HAL_ADC_MspInit+0xe0>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <HAL_ADC_MspInit+0xe0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <HAL_ADC_MspInit+0xe0>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <HAL_ADC_MspInit+0xe0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	2303      	movs	r3, #3
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	481d      	ldr	r0, [pc, #116]	; (8000abc <HAL_ADC_MspInit+0xe4>)
 8000a46:	f001 f823 	bl	8001a90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_ADC_MspInit+0xec>)
 8000a4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000a90:	f000 fd14 	bl	80014bc <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000a9a:	f7ff ff6b 	bl	8000974 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_ADC_MspInit+0xe8>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	200000d8 	.word	0x200000d8
 8000ac4:	40026410 	.word	0x40026410

08000ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad8:	d10e      	bne.n	8000af8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_TIM_Base_MspInit+0x64>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_TIM_Base_MspInit+0x64>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_TIM_Base_MspInit+0x64>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000af6:	e012      	b.n	8000b1e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_TIM_Base_MspInit+0x68>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d10d      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_TIM_Base_MspInit+0x64>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_TIM_Base_MspInit+0x64>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_TIM_Base_MspInit+0x64>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40000400 	.word	0x40000400

08000b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <HAL_TIM_MspPostInit+0xa4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d13b      	bne.n	8000bce <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <HAL_TIM_MspPostInit+0xa8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <HAL_TIM_MspPostInit+0xa8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_TIM_MspPostInit+0xa8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_TIM_MspPostInit+0xa8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <HAL_TIM_MspPostInit+0xa8>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_TIM_MspPostInit+0xa8>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b8e:	23c0      	movs	r3, #192	; 0xc0
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <HAL_TIM_MspPostInit+0xac>)
 8000baa:	f000 ff71 	bl	8001a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_TIM_MspPostInit+0xb0>)
 8000bca:	f000 ff61 	bl	8001a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40000400 	.word	0x40000400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020400 	.word	0x40020400

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f8ac 	bl	8000d74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c1c:	f007 fab4 	bl	8008188 <xTaskGetSchedulerState>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d001      	beq.n	8000c2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c26:	f008 f89f 	bl	8008d68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <DMA2_Stream0_IRQHandler+0x10>)
 8000c36:	f000 fcef 	bl	8001618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000d8 	.word	0x200000d8

08000c44 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <OTG_HS_IRQHandler+0x10>)
 8000c4a:	f001 f8e6 	bl	8001e1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000fd8 	.word	0x20000fd8

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca6:	f7ff ffd7 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f008 fbb9 	bl	8009420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc21 	bl	80004f4 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cc0:	080096e4 	.word	0x080096e4
  ldr r2, =_sbss
 8000cc4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cc8:	200014ec 	.word	0x200014ec

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 fb9d 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe3c 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fbb5 	bl	80014a2 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 fb7d 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	200001c8 	.word	0x200001c8

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200001c8 	.word	0x200001c8

08000db4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e033      	b.n	8000e32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fe00 	bl	80009d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d118      	bne.n	8000e24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dfa:	f023 0302 	bic.w	r3, r3, #2
 8000dfe:	f043 0202 	orr.w	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f94a 	bl	80010a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f023 0303 	bic.w	r3, r3, #3
 8000e1a:	f043 0201 	orr.w	r2, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40
 8000e22:	e001      	b.n	8000e28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1c>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e113      	b.n	8001080 <HAL_ADC_ConfigChannel+0x244>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	d925      	bls.n	8000eb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68d9      	ldr	r1, [r3, #12]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3b1e      	subs	r3, #30
 8000e7e:	2207      	movs	r2, #7
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43da      	mvns	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68d9      	ldr	r1, [r3, #12]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4403      	add	r3, r0
 8000ea6:	3b1e      	subs	r3, #30
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	e022      	b.n	8000efa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6919      	ldr	r1, [r3, #16]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	2207      	movs	r2, #7
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6919      	ldr	r1, [r3, #16]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4403      	add	r3, r0
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d824      	bhi.n	8000f4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	3b05      	subs	r3, #5
 8000f14:	221f      	movs	r2, #31
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	400a      	ands	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b05      	subs	r3, #5
 8000f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
 8000f4a:	e04c      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d824      	bhi.n	8000f9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	3b23      	subs	r3, #35	; 0x23
 8000f66:	221f      	movs	r2, #31
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	400a      	ands	r2, r1
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b23      	subs	r3, #35	; 0x23
 8000f90:	fa00 f203 	lsl.w	r2, r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9c:	e023      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	3b41      	subs	r3, #65	; 0x41
 8000fb0:	221f      	movs	r2, #31
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b41      	subs	r3, #65	; 0x41
 8000fda:	fa00 f203 	lsl.w	r2, r0, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe6:	4b29      	ldr	r3, [pc, #164]	; (800108c <HAL_ADC_ConfigChannel+0x250>)
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a28      	ldr	r2, [pc, #160]	; (8001090 <HAL_ADC_ConfigChannel+0x254>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d10f      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1d8>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b12      	cmp	r3, #18
 8000ffa:	d10b      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_ADC_ConfigChannel+0x254>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12b      	bne.n	8001076 <HAL_ADC_ConfigChannel+0x23a>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_ADC_ConfigChannel+0x258>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d003      	beq.n	8001030 <HAL_ADC_ConfigChannel+0x1f4>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b11      	cmp	r3, #17
 800102e:	d122      	bne.n	8001076 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <HAL_ADC_ConfigChannel+0x258>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d111      	bne.n	8001076 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_ADC_ConfigChannel+0x25c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <HAL_ADC_ConfigChannel+0x260>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	0c9a      	lsrs	r2, r3, #18
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001068:	e002      	b.n	8001070 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3b01      	subs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f9      	bne.n	800106a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40012300 	.word	0x40012300
 8001090:	40012000 	.word	0x40012000
 8001094:	10000012 	.word	0x10000012
 8001098:	20000000 	.word	0x20000000
 800109c:	431bde83 	.word	0x431bde83

080010a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a8:	4b79      	ldr	r3, [pc, #484]	; (8001290 <ADC_Init+0x1f0>)
 80010aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	021a      	lsls	r2, r3, #8
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6859      	ldr	r1, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800111a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6899      	ldr	r1, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <ADC_Init+0x1f4>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d022      	beq.n	800117e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6899      	ldr	r1, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6899      	ldr	r1, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	e00f      	b.n	800119e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800118c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800119c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0202 	bic.w	r2, r2, #2
 80011ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6899      	ldr	r1, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e1b      	ldrb	r3, [r3, #24]
 80011b8:	005a      	lsls	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01b      	beq.n	8001204 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80011ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6859      	ldr	r1, [r3, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	3b01      	subs	r3, #1
 80011f8:	035a      	lsls	r2, r3, #13
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	e007      	b.n	8001214 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001212:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	3b01      	subs	r3, #1
 8001230:	051a      	lsls	r2, r3, #20
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6899      	ldr	r1, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001256:	025a      	lsls	r2, r3, #9
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6899      	ldr	r1, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	029a      	lsls	r2, r3, #10
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	609a      	str	r2, [r3, #8]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40012300 	.word	0x40012300
 8001294:	0f000001 	.word	0x0f000001

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fc68 	bl	8000d9c <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e099      	b.n	800160c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0201 	bic.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f8:	e00f      	b.n	800151a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014fa:	f7ff fc4f 	bl	8000d9c <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b05      	cmp	r3, #5
 8001506:	d908      	bls.n	800151a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e078      	b.n	800160c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e8      	bne.n	80014fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_DMA_Init+0x158>)
 8001534:	4013      	ands	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2b04      	cmp	r3, #4
 8001572:	d107      	bne.n	8001584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4313      	orrs	r3, r2
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4313      	orrs	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f023 0307 	bic.w	r3, r3, #7
 800159a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d117      	bne.n	80015de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f9e9 	bl	8001998 <DMA_CheckFifoParam>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2240      	movs	r2, #64	; 0x40
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015da:	2301      	movs	r3, #1
 80015dc:	e016      	b.n	800160c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f9a0 	bl	800192c <DMA_CalcBaseAndBitshift>
 80015ec:	4603      	mov	r3, r0
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	223f      	movs	r2, #63	; 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f010803f 	.word	0xf010803f

08001618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001624:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <HAL_DMA_IRQHandler+0x248>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a8e      	ldr	r2, [pc, #568]	; (8001864 <HAL_DMA_IRQHandler+0x24c>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	0a9b      	lsrs	r3, r3, #10
 8001630:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	2208      	movs	r2, #8
 8001644:	409a      	lsls	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d01a      	beq.n	8001684 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0204 	bic.w	r2, r2, #4
 800166a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	2208      	movs	r2, #8
 8001672:	409a      	lsls	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	2201      	movs	r2, #1
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d012      	beq.n	80016ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	2201      	movs	r2, #1
 80016a8:	409a      	lsls	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2204      	movs	r2, #4
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d012      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00b      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	2204      	movs	r2, #4
 80016de:	409a      	lsls	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	f043 0204 	orr.w	r2, r3, #4
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	2210      	movs	r2, #16
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d043      	beq.n	8001788 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d03c      	beq.n	8001788 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2210      	movs	r2, #16
 8001714:	409a      	lsls	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d018      	beq.n	800175a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d108      	bne.n	8001748 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	2b00      	cmp	r3, #0
 800173c:	d024      	beq.n	8001788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
 8001746:	e01f      	b.n	8001788 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01b      	beq.n	8001788 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
 8001758:	e016      	b.n	8001788 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0208 	bic.w	r2, r2, #8
 8001776:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	2220      	movs	r2, #32
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 808f 	beq.w	80018b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8087 	beq.w	80018b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ae:	2220      	movs	r2, #32
 80017b0:	409a      	lsls	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d136      	bne.n	8001830 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0216 	bic.w	r2, r2, #22
 80017d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x1da>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0208 	bic.w	r2, r2, #8
 8001800:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	223f      	movs	r2, #63	; 0x3f
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001822:	2b00      	cmp	r3, #0
 8001824:	d07e      	beq.n	8001924 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
        }
        return;
 800182e:	e079      	b.n	8001924 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01d      	beq.n	800187a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10d      	bne.n	8001868 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	2b00      	cmp	r3, #0
 8001852:	d031      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
 800185c:	e02c      	b.n	80018b8 <HAL_DMA_IRQHandler+0x2a0>
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000
 8001864:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d023      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
 8001878:	e01e      	b.n	80018b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10f      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0210 	bic.w	r2, r2, #16
 8001896:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d032      	beq.n	8001926 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d022      	beq.n	8001912 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2205      	movs	r2, #5
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d307      	bcc.n	8001900 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f2      	bne.n	80018e4 <HAL_DMA_IRQHandler+0x2cc>
 80018fe:	e000      	b.n	8001902 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001900:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
 8001922:	e000      	b.n	8001926 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001924:	bf00      	nop
    }
  }
}
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3b10      	subs	r3, #16
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <DMA_CalcBaseAndBitshift+0x64>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <DMA_CalcBaseAndBitshift+0x68>)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d909      	bls.n	800196e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
 800196c:	e007      	b.n	800197e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	aaaaaaab 	.word	0xaaaaaaab
 8001994:	0800966c 	.word	0x0800966c

08001998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11f      	bne.n	80019f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d856      	bhi.n	8001a66 <DMA_CheckFifoParam+0xce>
 80019b8:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <DMA_CheckFifoParam+0x28>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	080019e3 	.word	0x080019e3
 80019c8:	080019d1 	.word	0x080019d1
 80019cc:	08001a67 	.word	0x08001a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d046      	beq.n	8001a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e0:	e043      	b.n	8001a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ea:	d140      	bne.n	8001a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f0:	e03d      	b.n	8001a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fa:	d121      	bne.n	8001a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d837      	bhi.n	8001a72 <DMA_CheckFifoParam+0xda>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <DMA_CheckFifoParam+0x70>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a1f 	.word	0x08001a1f
 8001a10:	08001a19 	.word	0x08001a19
 8001a14:	08001a31 	.word	0x08001a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a1c:	e030      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d025      	beq.n	8001a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a2e:	e022      	b.n	8001a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a38:	d11f      	bne.n	8001a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a3e:	e01c      	b.n	8001a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d903      	bls.n	8001a4e <DMA_CheckFifoParam+0xb6>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d003      	beq.n	8001a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a4c:	e018      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
      break;
 8001a52:	e015      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00e      	beq.n	8001a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
      break;
 8001a64:	e00b      	b.n	8001a7e <DMA_CheckFifoParam+0xe6>
      break;
 8001a66:	bf00      	nop
 8001a68:	e00a      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e008      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e006      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e004      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      break;
 8001a76:	bf00      	nop
 8001a78:	e002      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a7a:	bf00      	nop
 8001a7c:	e000      	b.n	8001a80 <DMA_CheckFifoParam+0xe8>
      break;
 8001a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e177      	b.n	8001d9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8166 	bne.w	8001d96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d005      	beq.n	8001ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d130      	bne.n	8001b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b18:	2201      	movs	r2, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 0201 	and.w	r2, r3, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d017      	beq.n	8001b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80c0 	beq.w	8001d96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_GPIO_Init+0x324>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a61      	ldr	r2, [pc, #388]	; (8001db8 <HAL_GPIO_Init+0x328>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <HAL_GPIO_Init+0x32c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d037      	beq.n	8001cce <HAL_GPIO_Init+0x23e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_GPIO_Init+0x330>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d031      	beq.n	8001cca <HAL_GPIO_Init+0x23a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <HAL_GPIO_Init+0x334>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02b      	beq.n	8001cc6 <HAL_GPIO_Init+0x236>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_GPIO_Init+0x338>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x232>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a54      	ldr	r2, [pc, #336]	; (8001dcc <HAL_GPIO_Init+0x33c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x22e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_GPIO_Init+0x340>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x22a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <HAL_GPIO_Init+0x344>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x226>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a51      	ldr	r2, [pc, #324]	; (8001dd8 <HAL_GPIO_Init+0x348>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x222>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a50      	ldr	r2, [pc, #320]	; (8001ddc <HAL_GPIO_Init+0x34c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x21e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x350>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x21a>
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	e012      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001caa:	230a      	movs	r3, #10
 8001cac:	e010      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e00e      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	e00c      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e00a      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	e008      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x240>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <HAL_GPIO_Init+0x328>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_GPIO_Init+0x354>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	f67f ae84 	bls.w	8001aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40021400 	.word	0x40021400
 8001dd4:	40021800 	.word	0x40021800
 8001dd8:	40021c00 	.word	0x40021c00
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40022400 	.word	0x40022400
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e1a:	b590      	push	{r4, r7, lr}
 8001e1c:	b08d      	sub	sp, #52	; 0x34
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fb4a 	bl	80054ca <USB_GetMode>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f040 848a 	bne.w	8002752 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 faae 	bl	80053a4 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8480 	beq.w	8002750 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 fa9b 	bl	80053a4 <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d107      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f002 0202 	and.w	r2, r2, #2
 8001e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fa89 	bl	80053a4 <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d161      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0210 	bic.w	r2, r2, #16
 8001eaa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 020f 	and.w	r2, r3, #15
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	0c5b      	lsrs	r3, r3, #17
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d124      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d035      	beq.n	8001f50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6a38      	ldr	r0, [r7, #32]
 8001ef8:	f003 f902 	bl	8005100 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f08:	441a      	add	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f1a:	441a      	add	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	621a      	str	r2, [r3, #32]
 8001f20:	e016      	b.n	8001f50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	0c5b      	lsrs	r3, r3, #17
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d110      	bne.n	8001f50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f34:	2208      	movs	r2, #8
 8001f36:	4619      	mov	r1, r3
 8001f38:	6a38      	ldr	r0, [r7, #32]
 8001f3a:	f003 f8e1 	bl	8005100 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f4a:	441a      	add	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0210 	orr.w	r2, r2, #16
 8001f5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fa1d 	bl	80053a4 <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f74:	f040 80a7 	bne.w	80020c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fa22 	bl	80053ca <USB_ReadDevAllOutEpInterrupt>
 8001f86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f88:	e099      	b.n	80020be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 808e 	beq.w	80020b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fa46 	bl	8005432 <USB_ReadDevOutEPInterrupt>
 8001fa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fe60 	bl	8002c8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 ff36 	bl	8002e5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	2310      	movs	r3, #16
 800200a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d109      	bne.n	8002036 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002030:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002034:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	78db      	ldrb	r3, [r3, #3]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d108      	bne.n	8002066 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2200      	movs	r2, #0
 8002058:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f007 f87f 	bl	8009164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002072:	461a      	mov	r2, r3
 8002074:	2302      	movs	r3, #2
 8002076:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	2320      	movs	r3, #32
 8002092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020aa:	461a      	mov	r2, r3
 80020ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	3301      	adds	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f47f af62 	bne.w	8001f8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 f96a 	bl	80053a4 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020da:	f040 80db 	bne.w	8002294 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 f98b 	bl	80053fe <USB_ReadDevAllInEpInterrupt>
 80020e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020ee:	e0cd      	b.n	800228c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80c2 	beq.w	8002280 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f003 f9b1 	bl	800546e <USB_ReadDevInEPInterrupt>
 800210c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d057      	beq.n	80021c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	2201      	movs	r2, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43db      	mvns	r3, r3
 8002132:	69f9      	ldr	r1, [r7, #28]
 8002134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002138:	4013      	ands	r3, r2
 800213a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	461a      	mov	r2, r3
 800214a:	2301      	movs	r3, #1
 800214c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d132      	bne.n	80021bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	334c      	adds	r3, #76	; 0x4c
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4403      	add	r3, r0
 8002176:	3348      	adds	r3, #72	; 0x48
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4419      	add	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4403      	add	r3, r0
 800218a:	334c      	adds	r3, #76	; 0x4c
 800218c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	2b00      	cmp	r3, #0
 8002192:	d113      	bne.n	80021bc <HAL_PCD_IRQHandler+0x3a2>
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	3354      	adds	r3, #84	; 0x54
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d108      	bne.n	80021bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021b4:	461a      	mov	r2, r3
 80021b6:	2101      	movs	r1, #1
 80021b8:	f003 f9b8 	bl	800552c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f006 ff49 	bl	800905a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021de:	461a      	mov	r2, r3
 80021e0:	2308      	movs	r3, #8
 80021e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fa:	461a      	mov	r2, r3
 80021fc:	2310      	movs	r3, #16
 80021fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002216:	461a      	mov	r2, r3
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d023      	beq.n	800226e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002228:	6a38      	ldr	r0, [r7, #32]
 800222a:	f002 fa01 	bl	8004630 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	3338      	adds	r3, #56	; 0x38
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	3304      	adds	r3, #4
 8002240:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	78db      	ldrb	r3, [r3, #3]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d108      	bne.n	800225c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2200      	movs	r2, #0
 800224e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	b2db      	uxtb	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f006 ff96 	bl	8009188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002268:	461a      	mov	r2, r3
 800226a:	2302      	movs	r3, #2
 800226c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fc79 	bl	8002b72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	3301      	adds	r3, #1
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	2b00      	cmp	r3, #0
 8002290:	f47f af2e 	bne.w	80020f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f003 f883 	bl	80053a4 <USB_ReadInterrupts>
 800229e:	4603      	mov	r3, r0
 80022a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022a8:	d122      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d108      	bne.n	80022da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022d0:	2100      	movs	r1, #0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fe08 	bl	8002ee8 <HAL_PCDEx_LPM_Callback>
 80022d8:	e002      	b.n	80022e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f006 ff34 	bl	8009148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 f855 	bl	80053a4 <USB_ReadInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002304:	d112      	bne.n	800232c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d102      	bne.n	800231c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f006 fef0 	bl	80090fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800232a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f003 f837 	bl	80053a4 <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002340:	f040 80b7 	bne.w	80024b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2110      	movs	r1, #16
 800235e:	4618      	mov	r0, r3
 8002360:	f002 f966 	bl	8004630 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002368:	e046      	b.n	80023f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002376:	461a      	mov	r2, r3
 8002378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800237c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238e:	0151      	lsls	r1, r2, #5
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	440a      	add	r2, r1
 8002394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800239c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023aa:	461a      	mov	r2, r3
 80023ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c2:	0151      	lsls	r1, r2, #5
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	440a      	add	r2, r1
 80023c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e2:	0151      	lsls	r1, r2, #5
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	440a      	add	r2, r1
 80023e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	3301      	adds	r3, #1
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3b3      	bcc.n	800236a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002410:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002414:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	2b00      	cmp	r3, #0
 800241c:	d016      	beq.n	800244c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242e:	f043 030b 	orr.w	r3, r3, #11
 8002432:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002444:	f043 030b 	orr.w	r3, r3, #11
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	e015      	b.n	8002478 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800245e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002462:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002472:	f043 030b 	orr.w	r3, r3, #11
 8002476:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002486:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800248a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800249c:	461a      	mov	r2, r3
 800249e:	f003 f845 	bl	800552c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 ff74 	bl	80053a4 <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c6:	d124      	bne.n	8002512 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f80a 	bl	80054e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 f8de 	bl	8004698 <USB_GetDevSpeed>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681c      	ldr	r4, [r3, #0]
 80024e8:	f001 f96e 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80024ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4620      	mov	r0, r4
 80024f8:	f001 fff8 	bl	80044ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f006 fdd4 	bl	80090aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002510:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f002 ff44 	bl	80053a4 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b08      	cmp	r3, #8
 8002524:	d10a      	bne.n	800253c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f006 fdb1 	bl	800908e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f002 0208 	and.w	r2, r2, #8
 800253a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f002 ff2f 	bl	80053a4 <USB_ReadInterrupts>
 8002546:	4603      	mov	r3, r0
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b80      	cmp	r3, #128	; 0x80
 800254e:	d122      	bne.n	8002596 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800255c:	2301      	movs	r3, #1
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
 8002560:	e014      	b.n	800258c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d105      	bne.n	8002586 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	b2db      	uxtb	r3, r3
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fac5 	bl	8002b10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	429a      	cmp	r2, r3
 8002594:	d3e5      	bcc.n	8002562 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f002 ff02 	bl	80053a4 <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025aa:	d13b      	bne.n	8002624 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025ac:	2301      	movs	r3, #1
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	e02b      	b.n	800260a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3340      	adds	r3, #64	; 0x40
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d115      	bne.n	8002604 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da12      	bge.n	8002604 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	333f      	adds	r3, #63	; 0x3f
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa86 	bl	8002b10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3301      	adds	r3, #1
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	429a      	cmp	r2, r3
 8002612:	d3ce      	bcc.n	80025b2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f002 febb 	bl	80053a4 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002638:	d155      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800263a:	2301      	movs	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	e045      	b.n	80026cc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d12e      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002668:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	da2b      	bge.n	80026c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800267a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800267e:	429a      	cmp	r2, r3
 8002680:	d121      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c2:	6053      	str	r3, [r2, #4]
            break;
 80026c4:	e007      	b.n	80026d6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3301      	adds	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d3b4      	bcc.n	8002640 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fe5a 	bl	80053a4 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fa:	d10a      	bne.n	8002712 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f006 fd55 	bl	80091ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fe44 	bl	80053a4 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d115      	bne.n	8002752 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f006 fd45 	bl	80091c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e000      	b.n	8002752 <HAL_PCD_IRQHandler+0x938>
      return;
 8002750:	bf00      	nop
    }
  }
}
 8002752:	3734      	adds	r7, #52	; 0x34
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}

08002758 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_PCD_SetAddress+0x1a>
 800276e:	2302      	movs	r3, #2
 8002770:	e013      	b.n	800279a <HAL_PCD_SetAddress+0x42>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fde4 	bl	8005358 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	4608      	mov	r0, r1
 80027ac:	4611      	mov	r1, r2
 80027ae:	461a      	mov	r2, r3
 80027b0:	4603      	mov	r3, r0
 80027b2:	70fb      	strb	r3, [r7, #3]
 80027b4:	460b      	mov	r3, r1
 80027b6:	803b      	strh	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da0f      	bge.n	80027e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	f003 020f 	and.w	r2, r3, #15
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	3338      	adds	r3, #56	; 0x38
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	705a      	strb	r2, [r3, #1]
 80027e6:	e00f      	b.n	8002808 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 020f 	and.w	r2, r3, #15
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	3304      	adds	r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002814:	883a      	ldrh	r2, [r7, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	78ba      	ldrb	r2, [r7, #2]
 800281e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	785b      	ldrb	r3, [r3, #1]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002832:	78bb      	ldrb	r3, [r7, #2]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d102      	bne.n	800283e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_PCD_EP_Open+0xaa>
 8002848:	2302      	movs	r3, #2
 800284a:	e00e      	b.n	800286a <HAL_PCD_EP_Open+0xc8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	4618      	mov	r0, r3
 800285c:	f001 ff41 	bl	80046e2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002868:	7afb      	ldrb	r3, [r7, #11]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	460b      	mov	r3, r1
 8002880:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002882:	7afb      	ldrb	r3, [r7, #11]
 8002884:	f003 020f 	and.w	r2, r3, #15
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b4:	7afb      	ldrb	r3, [r7, #11]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d102      	bne.n	80028ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	f002 f9cb 	bl	8004c80 <USB_EP0StartXfer>
 80028ea:	e008      	b.n	80028fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	6979      	ldr	r1, [r7, #20]
 80028fa:	f001 ff79 	bl	80047f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	460b      	mov	r3, r1
 8002916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	3338      	adds	r3, #56	; 0x38
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	3304      	adds	r3, #4
 800292e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2201      	movs	r2, #1
 8002946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b2da      	uxtb	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	6979      	ldr	r1, [r7, #20]
 800297a:	f002 f981 	bl	8004c80 <USB_EP0StartXfer>
 800297e:	e008      	b.n	8002992 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6979      	ldr	r1, [r7, #20]
 800298e:	f001 ff2f 	bl	80047f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d901      	bls.n	80029ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e050      	b.n	8002a5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da0f      	bge.n	80029e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 020f 	and.w	r2, r3, #15
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3338      	adds	r3, #56	; 0x38
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	705a      	strb	r2, [r3, #1]
 80029e0:	e00d      	b.n	80029fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_PCD_EP_SetStall+0x82>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e01e      	b.n	8002a5c <HAL_PCD_EP_SetStall+0xc0>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fbbf 	bl	80051b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	b2d9      	uxtb	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f002 fd6d 	bl	800552c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d901      	bls.n	8002a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e042      	b.n	8002b08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da0f      	bge.n	8002aaa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3338      	adds	r3, #56	; 0x38
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	705a      	strb	r2, [r3, #1]
 8002aa8:	e00f      	b.n	8002aca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_PCD_EP_ClrStall+0x86>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e00e      	b.n	8002b08 <HAL_PCD_EP_ClrStall+0xa4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f002 fbc7 	bl	800528c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da0c      	bge.n	8002b3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 020f 	and.w	r2, r3, #15
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3338      	adds	r3, #56	; 0x38
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e00c      	b.n	8002b58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 f9e6 	bl	8004f30 <USB_EPStopXfer>
 8002b64:	4603      	mov	r3, r0
 8002b66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b68:	7afb      	ldrb	r3, [r7, #11]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b08a      	sub	sp, #40	; 0x28
 8002b76:	af02      	add	r7, sp, #8
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	3338      	adds	r3, #56	; 0x38
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d901      	bls.n	8002baa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06c      	b.n	8002c84 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d902      	bls.n	8002bc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3303      	adds	r3, #3
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bce:	e02b      	b.n	8002c28 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d902      	bls.n	8002bec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3303      	adds	r3, #3
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6919      	ldr	r1, [r3, #16]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4603      	mov	r3, r0
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f002 fa3a 	bl	8005084 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	441a      	add	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	441a      	add	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d809      	bhi.n	8002c52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1a      	ldr	r2, [r3, #32]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d203      	bcs.n	8002c52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1be      	bne.n	8002bd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d811      	bhi.n	8002c82 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	2201      	movs	r2, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	6939      	ldr	r1, [r7, #16]
 8002c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c7e:	4013      	ands	r3, r2
 8002c80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	333c      	adds	r3, #60	; 0x3c
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d17b      	bne.n	8002dba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4a61      	ldr	r2, [pc, #388]	; (8002e54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	f240 80b9 	bls.w	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80b3 	beq.w	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf4:	6093      	str	r3, [r2, #8]
 8002cf6:	e0a7      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2320      	movs	r3, #32
 8002d12:	6093      	str	r3, [r2, #8]
 8002d14:	e098      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 8093 	bne.w	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	4a4b      	ldr	r2, [pc, #300]	; (8002e54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d90f      	bls.n	8002d4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d46:	6093      	str	r3, [r2, #8]
 8002d48:	e07e      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	1ad2      	subs	r2, r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d114      	bne.n	8002dac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d94:	461a      	mov	r2, r3
 8002d96:	2101      	movs	r1, #1
 8002d98:	f002 fbc8 	bl	800552c <USB_EP0_OutStart>
 8002d9c:	e006      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	4619      	mov	r1, r3
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f006 f936 	bl	8009024 <HAL_PCD_DataOutStageCallback>
 8002db8:	e046      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d124      	bne.n	8002e0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	6093      	str	r3, [r2, #8]
 8002de0:	e032      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f006 f90d 	bl	8009024 <HAL_PCD_DataOutStageCallback>
 8002e0a:	e01d      	b.n	8002e48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d114      	bne.n	8002e3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e34:	461a      	mov	r2, r3
 8002e36:	2100      	movs	r1, #0
 8002e38:	f002 fb78 	bl	800552c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f006 f8ee 	bl	8009024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	4f54300a 	.word	0x4f54300a
 8002e58:	4f54310a 	.word	0x4f54310a

08002e5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	333c      	adds	r3, #60	; 0x3c
 8002e74:	3304      	adds	r3, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d90e      	bls.n	8002eb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f006 f8a5 	bl	8009000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d90c      	bls.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	f002 fb2a 	bl	800552c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	4f54300a 	.word	0x4f54300a

08002ee8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e267      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d075      	beq.n	800300a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1e:	4b88      	ldr	r3, [pc, #544]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d00c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2a:	4b85      	ldr	r3, [pc, #532]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d112      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f36:	4b82      	ldr	r3, [pc, #520]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f42:	d10b      	bne.n	8002f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d05b      	beq.n	8003008 <HAL_RCC_OscConfig+0x108>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d157      	bne.n	8003008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e242      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x74>
 8002f66:	4b76      	ldr	r3, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a75      	ldr	r2, [pc, #468]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e01d      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb0>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x98>
 8002f7e:	4b70      	ldr	r3, [pc, #448]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6f      	ldr	r2, [pc, #444]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b6d      	ldr	r3, [pc, #436]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a6c      	ldr	r2, [pc, #432]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb0>
 8002f98:	4b69      	ldr	r3, [pc, #420]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a68      	ldr	r2, [pc, #416]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b66      	ldr	r3, [pc, #408]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a65      	ldr	r2, [pc, #404]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d013      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fd fef0 	bl	8000d9c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fd feec 	bl	8000d9c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e207      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xc0>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fd fedc 	bl	8000d9c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fd fed8 	bl	8000d9c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1f3      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	4b51      	ldr	r3, [pc, #324]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xe8>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d063      	beq.n	80030de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003016:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302a:	2b08      	cmp	r3, #8
 800302c:	d11c      	bne.n	8003068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302e:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d116      	bne.n	8003068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_RCC_OscConfig+0x152>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e1c7      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4937      	ldr	r1, [pc, #220]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003066:	e03a      	b.n	80030de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003070:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_OscConfig+0x244>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fd fe91 	bl	8000d9c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307e:	f7fd fe8d 	bl	8000d9c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1a8      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4925      	ldr	r1, [pc, #148]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
 80030b0:	e015      	b.n	80030de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b2:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_RCC_OscConfig+0x244>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fd fe70 	bl	8000d9c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c0:	f7fd fe6c 	bl	8000d9c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e187      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d036      	beq.n	8003158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_RCC_OscConfig+0x248>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fd fe50 	bl	8000d9c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003100:	f7fd fe4c 	bl	8000d9c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e167      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_OscConfig+0x240>)
 8003114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x200>
 800311e:	e01b      	b.n	8003158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_OscConfig+0x248>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fd fe39 	bl	8000d9c <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	e00e      	b.n	800314c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312e:	f7fd fe35 	bl	8000d9c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d907      	bls.n	800314c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e150      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
 8003140:	40023800 	.word	0x40023800
 8003144:	42470000 	.word	0x42470000
 8003148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ea      	bne.n	800312e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8097 	beq.w	8003294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316a:	4b81      	ldr	r3, [pc, #516]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b7d      	ldr	r3, [pc, #500]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a7c      	ldr	r2, [pc, #496]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b7a      	ldr	r3, [pc, #488]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	4b77      	ldr	r3, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d118      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a2:	4b74      	ldr	r3, [pc, #464]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a73      	ldr	r2, [pc, #460]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ae:	f7fd fdf5 	bl	8000d9c <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7fd fdf1 	bl	8000d9c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e10c      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x474>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x2ea>
 80031dc:	4b64      	ldr	r3, [pc, #400]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a63      	ldr	r2, [pc, #396]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	e01c      	b.n	8003224 <HAL_RCC_OscConfig+0x324>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x30c>
 80031f2:	4b5f      	ldr	r3, [pc, #380]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b5c      	ldr	r3, [pc, #368]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a5b      	ldr	r2, [pc, #364]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	e00b      	b.n	8003224 <HAL_RCC_OscConfig+0x324>
 800320c:	4b58      	ldr	r3, [pc, #352]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	4a57      	ldr	r2, [pc, #348]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	6713      	str	r3, [r2, #112]	; 0x70
 8003218:	4b55      	ldr	r3, [pc, #340]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a54      	ldr	r2, [pc, #336]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800321e:	f023 0304 	bic.w	r3, r3, #4
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d015      	beq.n	8003258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fd fdb6 	bl	8000d9c <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003232:	e00a      	b.n	800324a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fd fdb2 	bl	8000d9c <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0cb      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	4b49      	ldr	r3, [pc, #292]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0ee      	beq.n	8003234 <HAL_RCC_OscConfig+0x334>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003258:	f7fd fda0 	bl	8000d9c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325e:	e00a      	b.n	8003276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003260:	f7fd fd9c 	bl	8000d9c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0b5      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003276:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ee      	bne.n	8003260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b39      	ldr	r3, [pc, #228]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	4a38      	ldr	r2, [pc, #224]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a1 	beq.w	80033e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800329e:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d05c      	beq.n	8003364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d141      	bne.n	8003336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd fd70 	bl	8000d9c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd fd6c 	bl	8000d9c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e087      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	3b01      	subs	r3, #1
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	491b      	ldr	r1, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x478>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fd fd45 	bl	8000d9c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003316:	f7fd fd41 	bl	8000d9c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e05c      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x416>
 8003334:	e054      	b.n	80033e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_RCC_OscConfig+0x478>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fd fd2e 	bl	8000d9c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003344:	f7fd fd2a 	bl	8000d9c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e045      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_OscConfig+0x470>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x444>
 8003362:	e03d      	b.n	80033e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e038      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
 8003370:	40023800 	.word	0x40023800
 8003374:	40007000 	.word	0x40007000
 8003378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x4ec>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d028      	beq.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d121      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d11a      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033ac:	4013      	ands	r3, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d111      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	3b01      	subs	r3, #1
 80033c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800

080033f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0cc      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d90c      	bls.n	800342c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800344e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d044      	beq.n	8003510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d119      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e06f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e067      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4934      	ldr	r1, [pc, #208]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fd fc5c 	bl	8000d9c <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fd fc58 	bl	8000d9c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20c      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490a      	ldr	r1, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fbbc 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023c00 	.word	0x40023c00
 80035ac:	40023800 	.word	0x40023800
 80035b0:	0800965c 	.word	0x0800965c
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b094      	sub	sp, #80	; 0x50
 80035c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
 80035c8:	2300      	movs	r3, #0
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	2300      	movs	r3, #0
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d4:	4b79      	ldr	r3, [pc, #484]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d00d      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x40>
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	f200 80e1 	bhi.w	80037a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ee:	e0db      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b73      	ldr	r3, [pc, #460]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035f4:	e0db      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f6:	4b73      	ldr	r3, [pc, #460]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fa:	e0d8      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fc:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003604:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003606:	4b6d      	ldr	r3, [pc, #436]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d063      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003612:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	099b      	lsrs	r3, r3, #6
 8003618:	2200      	movs	r2, #0
 800361a:	63bb      	str	r3, [r7, #56]	; 0x38
 800361c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
 8003626:	2300      	movs	r3, #0
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
 800362a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800362e:	4622      	mov	r2, r4
 8003630:	462b      	mov	r3, r5
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	0159      	lsls	r1, r3, #5
 800363c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003640:	0150      	lsls	r0, r2, #5
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4621      	mov	r1, r4
 8003648:	1a51      	subs	r1, r2, r1
 800364a:	6139      	str	r1, [r7, #16]
 800364c:	4629      	mov	r1, r5
 800364e:	eb63 0301 	sbc.w	r3, r3, r1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003660:	4659      	mov	r1, fp
 8003662:	018b      	lsls	r3, r1, #6
 8003664:	4651      	mov	r1, sl
 8003666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366a:	4651      	mov	r1, sl
 800366c:	018a      	lsls	r2, r1, #6
 800366e:	4651      	mov	r1, sl
 8003670:	ebb2 0801 	subs.w	r8, r2, r1
 8003674:	4659      	mov	r1, fp
 8003676:	eb63 0901 	sbc.w	r9, r3, r1
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800368a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368e:	4690      	mov	r8, r2
 8003690:	4699      	mov	r9, r3
 8003692:	4623      	mov	r3, r4
 8003694:	eb18 0303 	adds.w	r3, r8, r3
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	462b      	mov	r3, r5
 800369c:	eb49 0303 	adc.w	r3, r9, r3
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ae:	4629      	mov	r1, r5
 80036b0:	024b      	lsls	r3, r1, #9
 80036b2:	4621      	mov	r1, r4
 80036b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036b8:	4621      	mov	r1, r4
 80036ba:	024a      	lsls	r2, r1, #9
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c2:	2200      	movs	r2, #0
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036cc:	f7fc fd90 	bl	80001f0 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4613      	mov	r3, r2
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d8:	e058      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b38      	ldr	r3, [pc, #224]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	4611      	mov	r1, r2
 80036e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
 80036f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	f04f 0000 	mov.w	r0, #0
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	0159      	lsls	r1, r3, #5
 8003702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003706:	0150      	lsls	r0, r2, #5
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4641      	mov	r1, r8
 800370e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003712:	4649      	mov	r1, r9
 8003714:	eb63 0b01 	sbc.w	fp, r3, r1
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003724:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003728:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800372c:	ebb2 040a 	subs.w	r4, r2, sl
 8003730:	eb63 050b 	sbc.w	r5, r3, fp
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	00eb      	lsls	r3, r5, #3
 800373e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003742:	00e2      	lsls	r2, r4, #3
 8003744:	4614      	mov	r4, r2
 8003746:	461d      	mov	r5, r3
 8003748:	4643      	mov	r3, r8
 800374a:	18e3      	adds	r3, r4, r3
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	464b      	mov	r3, r9
 8003750:	eb45 0303 	adc.w	r3, r5, r3
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003762:	4629      	mov	r1, r5
 8003764:	028b      	lsls	r3, r1, #10
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800376c:	4621      	mov	r1, r4
 800376e:	028a      	lsls	r2, r1, #10
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003776:	2200      	movs	r2, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	61fa      	str	r2, [r7, #28]
 800377c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003780:	f7fc fd36 	bl	80001f0 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_GetSysClockFreq+0x200>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	3301      	adds	r3, #1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800379c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800379e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037a6:	e002      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3750      	adds	r7, #80	; 0x50
 80037b4:	46bd      	mov	sp, r7
 80037b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	007a1200 	.word	0x007a1200

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e041      	b.n	8003876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd f95e 	bl	8000ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 fad8 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e041      	b.n	8003914 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f839 	bl	800391c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 fa89 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_TIM_PWM_Start+0x24>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e022      	b.n	800399a <HAL_TIM_PWM_Start+0x6a>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d109      	bne.n	800396e <HAL_TIM_PWM_Start+0x3e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e015      	b.n	800399a <HAL_TIM_PWM_Start+0x6a>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d109      	bne.n	8003988 <HAL_TIM_PWM_Start+0x58>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e008      	b.n	800399a <HAL_TIM_PWM_Start+0x6a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07c      	b.n	8003a9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start+0x82>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b0:	e013      	b.n	80039da <HAL_TIM_PWM_Start+0xaa>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0x92>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c0:	e00b      	b.n	80039da <HAL_TIM_PWM_Start+0xaa>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Start+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d0:	e003      	b.n	80039da <HAL_TIM_PWM_Start+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fce0 	bl	80043a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <HAL_TIM_PWM_Start+0x174>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <HAL_TIM_PWM_Start+0xcc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <HAL_TIM_PWM_Start+0x178>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_PWM_Start+0xd0>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_TIM_PWM_Start+0xd2>
 8003a00:	2300      	movs	r3, #0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_TIM_PWM_Start+0x174>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x136>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d01d      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x136>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_TIM_PWM_Start+0x17c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x136>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_TIM_PWM_Start+0x180>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x136>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_TIM_PWM_Start+0x184>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x136>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_TIM_PWM_Start+0x178>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x136>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_TIM_PWM_Start+0x188>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIM_PWM_Start+0x136>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a16      	ldr	r2, [pc, #88]	; (8003abc <HAL_TIM_PWM_Start+0x18c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d111      	bne.n	8003a8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	d010      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	e007      	b.n	8003a9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40001800 	.word	0x40001800

08003ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0ae      	b.n	8003c3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	f200 809f 	bhi.w	8003c2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003c2d 	.word	0x08003c2d
 8003afc:	08003c2d 	.word	0x08003c2d
 8003b00:	08003c2d 	.word	0x08003c2d
 8003b04:	08003b69 	.word	0x08003b69
 8003b08:	08003c2d 	.word	0x08003c2d
 8003b0c:	08003c2d 	.word	0x08003c2d
 8003b10:	08003c2d 	.word	0x08003c2d
 8003b14:	08003bab 	.word	0x08003bab
 8003b18:	08003c2d 	.word	0x08003c2d
 8003b1c:	08003c2d 	.word	0x08003c2d
 8003b20:	08003c2d 	.word	0x08003c2d
 8003b24:	08003beb 	.word	0x08003beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f9f0 	bl	8003f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0204 	bic.w	r2, r2, #4
 8003b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6999      	ldr	r1, [r3, #24]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	619a      	str	r2, [r3, #24]
      break;
 8003b66:	e064      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fa40 	bl	8003ff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	619a      	str	r2, [r3, #24]
      break;
 8003ba8:	e043      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fa95 	bl	80040e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0208 	orr.w	r2, r2, #8
 8003bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0204 	bic.w	r2, r2, #4
 8003bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69d9      	ldr	r1, [r3, #28]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	61da      	str	r2, [r3, #28]
      break;
 8003be8:	e023      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fae9 	bl	80041c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69d9      	ldr	r1, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	61da      	str	r2, [r3, #28]
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_ConfigClockSource+0x1c>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0b4      	b.n	8003dca <HAL_TIM_ConfigClockSource+0x186>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c98:	d03e      	beq.n	8003d18 <HAL_TIM_ConfigClockSource+0xd4>
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	f200 8087 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca6:	f000 8086 	beq.w	8003db6 <HAL_TIM_ConfigClockSource+0x172>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	d87f      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b70      	cmp	r3, #112	; 0x70
 8003cb2:	d01a      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xa6>
 8003cb4:	2b70      	cmp	r3, #112	; 0x70
 8003cb6:	d87b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b60      	cmp	r3, #96	; 0x60
 8003cba:	d050      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0x11a>
 8003cbc:	2b60      	cmp	r3, #96	; 0x60
 8003cbe:	d877      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b50      	cmp	r3, #80	; 0x50
 8003cc2:	d03c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0xfa>
 8003cc4:	2b50      	cmp	r3, #80	; 0x50
 8003cc6:	d873      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d058      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x13a>
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d86f      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b30      	cmp	r3, #48	; 0x30
 8003cd2:	d064      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	2b30      	cmp	r3, #48	; 0x30
 8003cd6:	d86b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d060      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d867      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05c      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d05a      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ce8:	e062      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6899      	ldr	r1, [r3, #8]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f000 fb35 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	609a      	str	r2, [r3, #8]
      break;
 8003d16:	e04f      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6899      	ldr	r1, [r3, #8]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f000 fb1e 	bl	8004368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d3a:	609a      	str	r2, [r3, #8]
      break;
 8003d3c:	e03c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f000 fa92 	bl	8004274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2150      	movs	r1, #80	; 0x50
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 faeb 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d5c:	e02c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 fab1 	bl	80042d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2160      	movs	r1, #96	; 0x60
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fadb 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e01c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f000 fa72 	bl	8004274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2140      	movs	r1, #64	; 0x40
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 facb 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d9c:	e00c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f000 fac2 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003dae:	e003      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      break;
 8003db4:	e000      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d00f      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3d      	ldr	r2, [pc, #244]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3b      	ldr	r2, [pc, #236]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d108      	bne.n	8003e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d027      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d023      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d017      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <TIM_Base_SetConfig+0x128>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <TIM_Base_SetConfig+0x12c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00f      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <TIM_Base_SetConfig+0x130>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <TIM_Base_SetConfig+0x134>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a24      	ldr	r2, [pc, #144]	; (8003f0c <TIM_Base_SetConfig+0x138>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <TIM_Base_SetConfig+0x13c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0xf8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d103      	bne.n	8003ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40010400 	.word	0x40010400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800
 8003f08:	40001800 	.word	0x40001800
 8003f0c:	40001c00 	.word	0x40001c00
 8003f10:	40002000 	.word	0x40002000

08003f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 0302 	bic.w	r3, r3, #2
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a20      	ldr	r2, [pc, #128]	; (8003fec <TIM_OC1_SetConfig+0xd8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC1_SetConfig+0x64>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <TIM_OC1_SetConfig+0xdc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10c      	bne.n	8003f92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0308 	bic.w	r3, r3, #8
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <TIM_OC1_SetConfig+0xd8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_OC1_SetConfig+0x8e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <TIM_OC1_SetConfig+0xdc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d111      	bne.n	8003fc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	621a      	str	r2, [r3, #32]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0320 	bic.w	r3, r3, #32
 800403e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <TIM_OC2_SetConfig+0xe4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_OC2_SetConfig+0x68>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a21      	ldr	r2, [pc, #132]	; (80040dc <TIM_OC2_SetConfig+0xe8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10d      	bne.n	8004078 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <TIM_OC2_SetConfig+0xe4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC2_SetConfig+0x94>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a16      	ldr	r2, [pc, #88]	; (80040dc <TIM_OC2_SetConfig+0xe8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d113      	bne.n	80040b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800408e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <TIM_OC3_SetConfig+0xe0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0x66>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <TIM_OC3_SetConfig+0xe4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10d      	bne.n	8004162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <TIM_OC3_SetConfig+0xe0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_OC3_SetConfig+0x92>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <TIM_OC3_SetConfig+0xe4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d113      	bne.n	800419a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40010400 	.word	0x40010400

080041c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <TIM_OC4_SetConfig+0xa4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_OC4_SetConfig+0x68>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a11      	ldr	r2, [pc, #68]	; (8004270 <TIM_OC4_SetConfig+0xa8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40010400 	.word	0x40010400

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0210 	bic.w	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	f043 0307 	orr.w	r3, r3, #7
 8004354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2201      	movs	r2, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	401a      	ands	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004408:	2302      	movs	r3, #2
 800440a:	e05a      	b.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d01d      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10c      	bne.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40010400 	.word	0x40010400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40001800 	.word	0x40001800

080044ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d165      	bne.n	80045cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4a41      	ldr	r2, [pc, #260]	; (8004608 <USB_SetTurnaroundTime+0x11c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d906      	bls.n	8004516 <USB_SetTurnaroundTime+0x2a>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a40      	ldr	r2, [pc, #256]	; (800460c <USB_SetTurnaroundTime+0x120>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d202      	bcs.n	8004516 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004510:	230f      	movs	r3, #15
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e062      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4a3c      	ldr	r2, [pc, #240]	; (800460c <USB_SetTurnaroundTime+0x120>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d306      	bcc.n	800452c <USB_SetTurnaroundTime+0x40>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4a3b      	ldr	r2, [pc, #236]	; (8004610 <USB_SetTurnaroundTime+0x124>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d202      	bcs.n	800452c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004526:	230e      	movs	r3, #14
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	e057      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4a38      	ldr	r2, [pc, #224]	; (8004610 <USB_SetTurnaroundTime+0x124>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d306      	bcc.n	8004542 <USB_SetTurnaroundTime+0x56>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4a37      	ldr	r2, [pc, #220]	; (8004614 <USB_SetTurnaroundTime+0x128>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d202      	bcs.n	8004542 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800453c:	230d      	movs	r3, #13
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e04c      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4a33      	ldr	r2, [pc, #204]	; (8004614 <USB_SetTurnaroundTime+0x128>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d306      	bcc.n	8004558 <USB_SetTurnaroundTime+0x6c>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4a32      	ldr	r2, [pc, #200]	; (8004618 <USB_SetTurnaroundTime+0x12c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d802      	bhi.n	8004558 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004552:	230c      	movs	r3, #12
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e041      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4a2f      	ldr	r2, [pc, #188]	; (8004618 <USB_SetTurnaroundTime+0x12c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d906      	bls.n	800456e <USB_SetTurnaroundTime+0x82>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a2e      	ldr	r2, [pc, #184]	; (800461c <USB_SetTurnaroundTime+0x130>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d802      	bhi.n	800456e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004568:	230b      	movs	r3, #11
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	e036      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4a2a      	ldr	r2, [pc, #168]	; (800461c <USB_SetTurnaroundTime+0x130>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d906      	bls.n	8004584 <USB_SetTurnaroundTime+0x98>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4a29      	ldr	r2, [pc, #164]	; (8004620 <USB_SetTurnaroundTime+0x134>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d802      	bhi.n	8004584 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800457e:	230a      	movs	r3, #10
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e02b      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4a26      	ldr	r2, [pc, #152]	; (8004620 <USB_SetTurnaroundTime+0x134>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d906      	bls.n	800459a <USB_SetTurnaroundTime+0xae>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a25      	ldr	r2, [pc, #148]	; (8004624 <USB_SetTurnaroundTime+0x138>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d202      	bcs.n	800459a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004594:	2309      	movs	r3, #9
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e020      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4a21      	ldr	r2, [pc, #132]	; (8004624 <USB_SetTurnaroundTime+0x138>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d306      	bcc.n	80045b0 <USB_SetTurnaroundTime+0xc4>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <USB_SetTurnaroundTime+0x13c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d802      	bhi.n	80045b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045aa:	2308      	movs	r3, #8
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e015      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <USB_SetTurnaroundTime+0x13c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d906      	bls.n	80045c6 <USB_SetTurnaroundTime+0xda>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a1c      	ldr	r2, [pc, #112]	; (800462c <USB_SetTurnaroundTime+0x140>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d202      	bcs.n	80045c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045c0:	2307      	movs	r3, #7
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e00a      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045c6:	2306      	movs	r3, #6
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e007      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80045d2:	2309      	movs	r3, #9
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e001      	b.n	80045dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045d8:	2309      	movs	r3, #9
 80045da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	00d8acbf 	.word	0x00d8acbf
 800460c:	00e4e1c0 	.word	0x00e4e1c0
 8004610:	00f42400 	.word	0x00f42400
 8004614:	01067380 	.word	0x01067380
 8004618:	011a499f 	.word	0x011a499f
 800461c:	01312cff 	.word	0x01312cff
 8004620:	014ca43f 	.word	0x014ca43f
 8004624:	016e3600 	.word	0x016e3600
 8004628:	01a6ab1f 	.word	0x01a6ab1f
 800462c:	01e84800 	.word	0x01e84800

08004630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <USB_FlushTxFifo+0x64>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e01b      	b.n	8004688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	daf2      	bge.n	800463e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	019b      	lsls	r3, r3, #6
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <USB_FlushTxFifo+0x64>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e006      	b.n	8004688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d0f0      	beq.n	8004668 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	00030d40 	.word	0x00030d40

08004698 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0306 	and.w	r3, r3, #6
 80046b0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]
 80046bc:	e00a      	b.n	80046d4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d002      	beq.n	80046ca <USB_GetDevSpeed+0x32>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d102      	bne.n	80046d0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046ca:	2302      	movs	r3, #2
 80046cc:	75fb      	strb	r3, [r7, #23]
 80046ce:	e001      	b.n	80046d4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046d0:	230f      	movs	r3, #15
 80046d2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d13a      	bne.n	8004774 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	b29b      	uxth	r3, r3
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800471c:	4313      	orrs	r3, r2
 800471e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d155      	bne.n	80047e2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	791b      	ldrb	r3, [r3, #4]
 8004750:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004752:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	059b      	lsls	r3, r3, #22
 8004758:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800475a:	4313      	orrs	r3, r2
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e036      	b.n	80047e2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	68f9      	ldr	r1, [r7, #12]
 800478e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004792:	4313      	orrs	r3, r2
 8004794:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d11a      	bne.n	80047e2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	791b      	ldrb	r3, [r3, #4]
 80047c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047c8:	430b      	orrs	r3, r1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	; 0x28
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 815c 	bne.w	8004aca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d132      	bne.n	8004880 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800483c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	0151      	lsls	r1, r2, #5
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	440a      	add	r2, r1
 8004854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800485c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004878:	0cdb      	lsrs	r3, r3, #19
 800487a:	04db      	lsls	r3, r3, #19
 800487c:	6113      	str	r3, [r2, #16]
 800487e:	e074      	b.n	800496a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489a:	0cdb      	lsrs	r3, r3, #19
 800489c:	04db      	lsls	r3, r3, #19
 800489e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	6999      	ldr	r1, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	440b      	add	r3, r1
 80048dc:	1e59      	subs	r1, r3, #1
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048e8:	4b9d      	ldr	r3, [pc, #628]	; (8004b60 <USB_EPStartXfer+0x370>)
 80048ea:	400b      	ands	r3, r1
 80048ec:	69b9      	ldr	r1, [r7, #24]
 80048ee:	0148      	lsls	r0, r1, #5
 80048f0:	69f9      	ldr	r1, [r7, #28]
 80048f2:	4401      	add	r1, r0
 80048f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048f8:	4313      	orrs	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004912:	69b9      	ldr	r1, [r7, #24]
 8004914:	0148      	lsls	r0, r1, #5
 8004916:	69f9      	ldr	r1, [r7, #28]
 8004918:	4401      	add	r1, r0
 800491a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800491e:	4313      	orrs	r3, r2
 8004920:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	791b      	ldrb	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d11f      	bne.n	800496a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004944:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004948:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004968:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d14b      	bne.n	8004a08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	791b      	ldrb	r3, [r3, #4]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d128      	bne.n	80049e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d110      	bne.n	80049c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e00f      	b.n	80049e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e133      	b.n	8004c70 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	791b      	ldrb	r3, [r3, #4]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d015      	beq.n	8004a5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 811b 	beq.w	8004c70 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a56:	4313      	orrs	r3, r2
 8004a58:	634b      	str	r3, [r1, #52]	; 0x34
 8004a5a:	e109      	b.n	8004c70 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d110      	bne.n	8004a8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e00f      	b.n	8004aae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6919      	ldr	r1, [r3, #16]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	781a      	ldrb	r2, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	b298      	uxth	r0, r3
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fade 	bl	8005084 <USB_WritePacket>
 8004ac8:	e0d2      	b.n	8004c70 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae4:	0cdb      	lsrs	r3, r3, #19
 8004ae6:	04db      	lsls	r3, r3, #19
 8004ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d126      	bne.n	8004b64 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2c:	69b9      	ldr	r1, [r7, #24]
 8004b2e:	0148      	lsls	r0, r1, #5
 8004b30:	69f9      	ldr	r1, [r7, #28]
 8004b32:	4401      	add	r1, r0
 8004b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b5a:	6113      	str	r3, [r2, #16]
 8004b5c:	e03a      	b.n	8004bd4 <USB_EPStartXfer+0x3e4>
 8004b5e:	bf00      	nop
 8004b60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	8afa      	ldrh	r2, [r7, #22]
 8004b80:	fb03 f202 	mul.w	r2, r3, r2
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	04d9      	lsls	r1, r3, #19
 8004b9a:	4b38      	ldr	r3, [pc, #224]	; (8004c7c <USB_EPStartXfer+0x48c>)
 8004b9c:	400b      	ands	r3, r1
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	0148      	lsls	r0, r1, #5
 8004ba2:	69f9      	ldr	r1, [r7, #28]
 8004ba4:	4401      	add	r1, r0
 8004ba6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004baa:	4313      	orrs	r3, r2
 8004bac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc4:	69b9      	ldr	r1, [r7, #24]
 8004bc6:	0148      	lsls	r0, r1, #5
 8004bc8:	69f9      	ldr	r1, [r7, #28]
 8004bca:	4401      	add	r1, r0
 8004bcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10d      	bne.n	8004bf6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6919      	ldr	r1, [r3, #16]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	460a      	mov	r2, r1
 8004bf4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	791b      	ldrb	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d128      	bne.n	8004c50 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d110      	bne.n	8004c30 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	0151      	lsls	r1, r2, #5
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	440a      	add	r2, r1
 8004c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e00f      	b.n	8004c50 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	1ff80000 	.word	0x1ff80000

08004c80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	785b      	ldrb	r3, [r3, #1]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	f040 80ce 	bne.w	8004e3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d132      	bne.n	8004d10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d08:	0cdb      	lsrs	r3, r3, #19
 8004d0a:	04db      	lsls	r3, r3, #19
 8004d0c:	6113      	str	r3, [r2, #16]
 8004d0e:	e04e      	b.n	8004dae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2a:	0cdb      	lsrs	r3, r3, #19
 8004d2c:	04db      	lsls	r3, r3, #19
 8004d2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d903      	bls.n	8004d68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9e:	6939      	ldr	r1, [r7, #16]
 8004da0:	0148      	lsls	r0, r1, #5
 8004da2:	6979      	ldr	r1, [r7, #20]
 8004da4:	4401      	add	r1, r0
 8004da6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004daa:	4313      	orrs	r3, r2
 8004dac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d11e      	bne.n	8004df2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	e097      	b.n	8004f22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8083 	beq.w	8004f22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	6979      	ldr	r1, [r7, #20]
 8004e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	634b      	str	r3, [r1, #52]	; 0x34
 8004e3c:	e071      	b.n	8004f22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e58:	0cdb      	lsrs	r3, r3, #19
 8004e5a:	04db      	lsls	r3, r3, #19
 8004e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed0:	6939      	ldr	r1, [r7, #16]
 8004ed2:	0148      	lsls	r0, r1, #5
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	4401      	add	r1, r0
 8004ed8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004edc:	4313      	orrs	r3, r2
 8004ede:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10d      	bne.n	8004f02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6919      	ldr	r1, [r3, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	460a      	mov	r2, r1
 8004f00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d14a      	bne.n	8004fe4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f66:	f040 8086 	bne.w	8005076 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d902      	bls.n	8004fc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc6:	e056      	b.n	8005076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe0:	d0e7      	beq.n	8004fb2 <USB_EPStopXfer+0x82>
 8004fe2:	e048      	b.n	8005076 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ffc:	d13b      	bne.n	8005076 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	7812      	ldrb	r2, [r2, #0]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005020:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005044:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005052:	4293      	cmp	r3, r2
 8005054:	d902      	bls.n	800505c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
          break;
 800505a:	e00c      	b.n	8005076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005074:	d0e7      	beq.n	8005046 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005084:	b480      	push	{r7}
 8005086:	b089      	sub	sp, #36	; 0x24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	460b      	mov	r3, r1
 8005094:	71fb      	strb	r3, [r7, #7]
 8005096:	4613      	mov	r3, r2
 8005098:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d123      	bne.n	80050f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050aa:	88bb      	ldrh	r3, [r7, #4]
 80050ac:	3303      	adds	r3, #3
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e018      	b.n	80050ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	031a      	lsls	r2, r3, #12
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c4:	461a      	mov	r2, r3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	3301      	adds	r3, #1
 80050d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	3301      	adds	r3, #1
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d3e2      	bcc.n	80050b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3724      	adds	r7, #36	; 0x24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005100:	b480      	push	{r7}
 8005102:	b08b      	sub	sp, #44	; 0x2c
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	b29b      	uxth	r3, r3
 800511c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800511e:	88fb      	ldrh	r3, [r7, #6]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	e014      	b.n	8005156 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	601a      	str	r2, [r3, #0]
    pDest++;
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	3301      	adds	r3, #1
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	3301      	adds	r3, #1
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	3301      	adds	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	3301      	adds	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	429a      	cmp	r2, r3
 800515c:	d3e6      	bcc.n	800512c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800515e:	8bfb      	ldrh	r3, [r7, #30]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01e      	beq.n	80051a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516e:	461a      	mov	r2, r3
 8005170:	f107 0310 	add.w	r3, r7, #16
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
 8005184:	b2da      	uxtb	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	701a      	strb	r2, [r3, #0]
      i++;
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	3301      	adds	r3, #1
 800518e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	3301      	adds	r3, #1
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005196:	8bfb      	ldrh	r3, [r7, #30]
 8005198:	3b01      	subs	r3, #1
 800519a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800519c:	8bfb      	ldrh	r3, [r7, #30]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ea      	bne.n	8005178 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	372c      	adds	r7, #44	; 0x2c
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d12c      	bne.n	8005226 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db12      	blt.n	8005204 <USB_EPSetStall+0x54>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00f      	beq.n	8005204 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005202:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e02b      	b.n	800527e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	db12      	blt.n	800525e <USB_EPSetStall+0xae>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00f      	beq.n	800525e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	0151      	lsls	r1, r2, #5
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	440a      	add	r2, r1
 8005254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800525c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800527c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d128      	bne.n	80052fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	791b      	ldrb	r3, [r3, #4]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d003      	beq.n	80052d8 <USB_EPClearStall+0x4c>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d138      	bne.n	800534a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	e027      	b.n	800534a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005318:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	791b      	ldrb	r3, [r3, #4]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d003      	beq.n	800532a <USB_EPClearStall+0x9e>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	791b      	ldrb	r3, [r3, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d10f      	bne.n	800534a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005348:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005376:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800537a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053bc:	68fb      	ldr	r3, [r7, #12]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	0c1b      	lsrs	r3, r3, #16
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	4013      	ands	r3, r2
 8005420:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	b29b      	uxth	r3, r3
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005460:	68bb      	ldr	r3, [r7, #8]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005490:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	01db      	lsls	r3, r3, #7
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4013      	ands	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054bc:	68bb      	ldr	r3, [r7, #8]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0301 	and.w	r3, r3, #1
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005500:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005504:	f023 0307 	bic.w	r3, r3, #7
 8005508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	460b      	mov	r3, r1
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	333c      	adds	r3, #60	; 0x3c
 8005542:	3304      	adds	r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <USB_EP0_OutStart+0xb8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d90a      	bls.n	8005566 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005560:	d101      	bne.n	8005566 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e037      	b.n	80055d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	461a      	mov	r2, r3
 800556e:	2300      	movs	r3, #0
 8005570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005594:	f043 0318 	orr.w	r3, r3, #24
 8005598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10f      	bne.n	80055d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	461a      	mov	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	4f54300a 	.word	0x4f54300a

080055e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	4611      	mov	r1, r2
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	4611      	mov	r1, r2
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800565c:	2303      	movs	r3, #3
 800565e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f001 f8b2 	bl	80067e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d01a      	beq.n	80056dc <USBD_LL_SetupStage+0x72>
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d822      	bhi.n	80056f0 <USBD_LL_SetupStage+0x86>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <USBD_LL_SetupStage+0x4a>
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d00a      	beq.n	80056c8 <USBD_LL_SetupStage+0x5e>
 80056b2:	e01d      	b.n	80056f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb09 	bl	8005cd4 <USBD_StdDevReq>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]
      break;
 80056c6:	e020      	b.n	800570a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fb71 	bl	8005db8 <USBD_StdItfReq>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e016      	b.n	800570a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fbd3 	bl	8005e90 <USBD_StdEPReq>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
      break;
 80056ee:	e00c      	b.n	800570a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f003 fd96 	bl	8009230 <USBD_LL_StallEP>
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]
      break;
 8005708:	bf00      	nop
  }

  return ret;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	460b      	mov	r3, r1
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d16e      	bne.n	800580a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800573a:	2b03      	cmp	r3, #3
 800573c:	f040 8098 	bne.w	8005870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d913      	bls.n	8005774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	1ad2      	subs	r2, r2, r3
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4293      	cmp	r3, r2
 8005764:	bf28      	it	cs
 8005766:	4613      	movcs	r3, r2
 8005768:	461a      	mov	r2, r3
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f001 f8b1 	bl	80068d4 <USBD_CtlContinueRx>
 8005772:	e07d      	b.n	8005870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2b02      	cmp	r3, #2
 8005780:	d014      	beq.n	80057ac <USBD_LL_DataOutStage+0x98>
 8005782:	2b02      	cmp	r3, #2
 8005784:	d81d      	bhi.n	80057c2 <USBD_LL_DataOutStage+0xae>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <USBD_LL_DataOutStage+0x7c>
 800578a:	2b01      	cmp	r3, #1
 800578c:	d003      	beq.n	8005796 <USBD_LL_DataOutStage+0x82>
 800578e:	e018      	b.n	80057c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	75bb      	strb	r3, [r7, #22]
            break;
 8005794:	e018      	b.n	80057c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800579c:	b2db      	uxtb	r3, r3
 800579e:	4619      	mov	r1, r3
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa5e 	bl	8005c62 <USBD_CoreFindIF>
 80057a6:	4603      	mov	r3, r0
 80057a8:	75bb      	strb	r3, [r7, #22]
            break;
 80057aa:	e00d      	b.n	80057c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4619      	mov	r1, r3
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fa60 	bl	8005c7c <USBD_CoreFindEP>
 80057bc:	4603      	mov	r3, r0
 80057be:	75bb      	strb	r3, [r7, #22]
            break;
 80057c0:	e002      	b.n	80057c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75bb      	strb	r3, [r7, #22]
            break;
 80057c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057c8:	7dbb      	ldrb	r3, [r7, #22]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d119      	bne.n	8005802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d113      	bne.n	8005802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057da:	7dba      	ldrb	r2, [r7, #22]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	32ae      	adds	r2, #174	; 0xae
 80057e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057ea:	7dba      	ldrb	r2, [r7, #22]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057f2:	7dba      	ldrb	r2, [r7, #22]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	32ae      	adds	r2, #174	; 0xae
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 f877 	bl	80068f6 <USBD_CtlSendStatus>
 8005808:	e032      	b.n	8005870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fa31 	bl	8005c7c <USBD_CoreFindEP>
 800581a:	4603      	mov	r3, r0
 800581c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800581e:	7dbb      	ldrb	r3, [r7, #22]
 8005820:	2bff      	cmp	r3, #255	; 0xff
 8005822:	d025      	beq.n	8005870 <USBD_LL_DataOutStage+0x15c>
 8005824:	7dbb      	ldrb	r3, [r7, #22]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d122      	bne.n	8005870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d117      	bne.n	8005866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005836:	7dba      	ldrb	r2, [r7, #22]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	32ae      	adds	r2, #174	; 0xae
 800583c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00f      	beq.n	8005866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005846:	7dba      	ldrb	r2, [r7, #22]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800584e:	7dba      	ldrb	r2, [r7, #22]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	32ae      	adds	r2, #174	; 0xae
 8005854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	7afa      	ldrb	r2, [r7, #11]
 800585c:	4611      	mov	r1, r2
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	4798      	blx	r3
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800586c:	7dfb      	ldrb	r3, [r7, #23]
 800586e:	e000      	b.n	8005872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	460b      	mov	r3, r1
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005888:	7afb      	ldrb	r3, [r7, #11]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d16f      	bne.n	800596e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3314      	adds	r3, #20
 8005892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800589a:	2b02      	cmp	r3, #2
 800589c:	d15a      	bne.n	8005954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d914      	bls.n	80058d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	461a      	mov	r2, r3
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fff6 	bl	80068b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058c6:	2300      	movs	r3, #0
 80058c8:	2200      	movs	r2, #0
 80058ca:	2100      	movs	r1, #0
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f003 fd59 	bl	8009384 <USBD_LL_PrepareReceive>
 80058d2:	e03f      	b.n	8005954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d11c      	bne.n	800591a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d316      	bcc.n	800591a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d20f      	bcs.n	800591a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058fa:	2200      	movs	r2, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 ffd7 	bl	80068b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800590c:	2300      	movs	r3, #0
 800590e:	2200      	movs	r2, #0
 8005910:	2100      	movs	r1, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f003 fd36 	bl	8009384 <USBD_LL_PrepareReceive>
 8005918:	e01c      	b.n	8005954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b03      	cmp	r3, #3
 8005924:	d10f      	bne.n	8005946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f003 fc71 	bl	8009230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 ffe4 	bl	800691c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d03a      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fe42 	bl	80055e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800596c:	e032      	b.n	80059d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f97f 	bl	8005c7c <USBD_CoreFindEP>
 800597e:	4603      	mov	r3, r0
 8005980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	d025      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d122      	bne.n	80059d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b03      	cmp	r3, #3
 8005998:	d11c      	bne.n	80059d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800599a:	7dfa      	ldrb	r2, [r7, #23]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	32ae      	adds	r2, #174	; 0xae
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059aa:	7dfa      	ldrb	r2, [r7, #23]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059b2:	7dfa      	ldrb	r2, [r7, #23]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	32ae      	adds	r2, #174	; 0xae
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	7afa      	ldrb	r2, [r7, #11]
 80059c0:	4611      	mov	r1, r2
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	4798      	blx	r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059ca:	7dbb      	ldrb	r3, [r7, #22]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059d0:	7dbb      	ldrb	r3, [r7, #22]
 80059d2:	e000      	b.n	80059d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d014      	beq.n	8005a44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6852      	ldr	r2, [r2, #4]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	4611      	mov	r1, r2
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a40:	2303      	movs	r3, #3
 8005a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a44:	2340      	movs	r3, #64	; 0x40
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f003 fbca 	bl	80091e4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2240      	movs	r2, #64	; 0x40
 8005a5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	2200      	movs	r2, #0
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f003 fbbc 	bl	80091e4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2240      	movs	r2, #64	; 0x40
 8005a76:	621a      	str	r2, [r3, #32]

  return ret;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2204      	movs	r2, #4
 8005abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d106      	bne.n	8005af0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d110      	bne.n	8005b34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	32ae      	adds	r2, #174	; 0xae
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e01c      	b.n	8005b9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d115      	bne.n	8005b98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	32ae      	adds	r2, #174	; 0xae
 8005b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32ae      	adds	r2, #174	; 0xae
 8005b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	4611      	mov	r1, r2
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	32ae      	adds	r2, #174	; 0xae
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e01c      	b.n	8005bfe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d115      	bne.n	8005bfc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	32ae      	adds	r2, #174	; 0xae
 8005bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00b      	beq.n	8005bfc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	32ae      	adds	r2, #174	; 0xae
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00e      	beq.n	8005c58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6852      	ldr	r2, [r2, #4]
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	4611      	mov	r1, r2
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	3301      	adds	r3, #1
 8005cac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cb4:	8a3b      	ldrh	r3, [r7, #16]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	b21a      	sxth	r2, r3
 8005cba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	b21b      	sxth	r3, r3
 8005cc2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d005      	beq.n	8005cfa <USBD_StdDevReq+0x26>
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d857      	bhi.n	8005da2 <USBD_StdDevReq+0xce>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00f      	beq.n	8005d16 <USBD_StdDevReq+0x42>
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d153      	bne.n	8005da2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	32ae      	adds	r2, #174	; 0xae
 8005d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
      break;
 8005d14:	e04a      	b.n	8005dac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b09      	cmp	r3, #9
 8005d1c:	d83b      	bhi.n	8005d96 <USBD_StdDevReq+0xc2>
 8005d1e:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <USBD_StdDevReq+0x50>)
 8005d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005d8d 	.word	0x08005d8d
 8005d2c:	08005d97 	.word	0x08005d97
 8005d30:	08005d83 	.word	0x08005d83
 8005d34:	08005d97 	.word	0x08005d97
 8005d38:	08005d57 	.word	0x08005d57
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d97 	.word	0x08005d97
 8005d44:	08005d6f 	.word	0x08005d6f
 8005d48:	08005d61 	.word	0x08005d61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa3c 	bl	80061cc <USBD_GetDescriptor>
          break;
 8005d54:	e024      	b.n	8005da0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fba1 	bl	80064a0 <USBD_SetAddress>
          break;
 8005d5e:	e01f      	b.n	8005da0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fbe0 	bl	8006528 <USBD_SetConfig>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d6c:	e018      	b.n	8005da0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fc83 	bl	800667c <USBD_GetConfig>
          break;
 8005d76:	e013      	b.n	8005da0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fcb4 	bl	80066e8 <USBD_GetStatus>
          break;
 8005d80:	e00e      	b.n	8005da0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fce3 	bl	8006750 <USBD_SetFeature>
          break;
 8005d8a:	e009      	b.n	8005da0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fd07 	bl	80067a2 <USBD_ClrFeature>
          break;
 8005d94:	e004      	b.n	8005da0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fd5e 	bl	800685a <USBD_CtlError>
          break;
 8005d9e:	bf00      	nop
      }
      break;
 8005da0:	e004      	b.n	8005dac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fd58 	bl	800685a <USBD_CtlError>
      break;
 8005daa:	bf00      	nop
  }

  return ret;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop

08005db8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	d005      	beq.n	8005dde <USBD_StdItfReq+0x26>
 8005dd2:	2b40      	cmp	r3, #64	; 0x40
 8005dd4:	d852      	bhi.n	8005e7c <USBD_StdItfReq+0xc4>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <USBD_StdItfReq+0x26>
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d14e      	bne.n	8005e7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d840      	bhi.n	8005e6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	889b      	ldrh	r3, [r3, #4]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d836      	bhi.n	8005e64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	889b      	ldrh	r3, [r3, #4]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff2f 	bl	8005c62 <USBD_CoreFindIF>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
 8005e0a:	2bff      	cmp	r3, #255	; 0xff
 8005e0c:	d01d      	beq.n	8005e4a <USBD_StdItfReq+0x92>
 8005e0e:	7bbb      	ldrb	r3, [r7, #14]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11a      	bne.n	8005e4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e14:	7bba      	ldrb	r2, [r7, #14]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	32ae      	adds	r2, #174	; 0xae
 8005e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00f      	beq.n	8005e44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e24:	7bba      	ldrb	r2, [r7, #14]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e2c:	7bba      	ldrb	r2, [r7, #14]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32ae      	adds	r2, #174	; 0xae
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e42:	e004      	b.n	8005e4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e44:	2303      	movs	r3, #3
 8005e46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e48:	e001      	b.n	8005e4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	88db      	ldrh	r3, [r3, #6]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d110      	bne.n	8005e78 <USBD_StdItfReq+0xc0>
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10d      	bne.n	8005e78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fd4a 	bl	80068f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e62:	e009      	b.n	8005e78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e64:	6839      	ldr	r1, [r7, #0]
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fcf7 	bl	800685a <USBD_CtlError>
          break;
 8005e6c:	e004      	b.n	8005e78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fcf2 	bl	800685a <USBD_CtlError>
          break;
 8005e76:	e000      	b.n	8005e7a <USBD_StdItfReq+0xc2>
          break;
 8005e78:	bf00      	nop
      }
      break;
 8005e7a:	e004      	b.n	8005e86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fceb 	bl	800685a <USBD_CtlError>
      break;
 8005e84:	bf00      	nop
  }

  return ret;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	889b      	ldrh	r3, [r3, #4]
 8005ea2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d007      	beq.n	8005ec0 <USBD_StdEPReq+0x30>
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	f200 817f 	bhi.w	80061b4 <USBD_StdEPReq+0x324>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d02a      	beq.n	8005f10 <USBD_StdEPReq+0x80>
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	f040 817a 	bne.w	80061b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fed9 	bl	8005c7c <USBD_CoreFindEP>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ece:	7b7b      	ldrb	r3, [r7, #13]
 8005ed0:	2bff      	cmp	r3, #255	; 0xff
 8005ed2:	f000 8174 	beq.w	80061be <USBD_StdEPReq+0x32e>
 8005ed6:	7b7b      	ldrb	r3, [r7, #13]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f040 8170 	bne.w	80061be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005ede:	7b7a      	ldrb	r2, [r7, #13]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005ee6:	7b7a      	ldrb	r2, [r7, #13]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	32ae      	adds	r2, #174	; 0xae
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8163 	beq.w	80061be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ef8:	7b7a      	ldrb	r2, [r7, #13]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32ae      	adds	r2, #174	; 0xae
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f0e:	e156      	b.n	80061be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d008      	beq.n	8005f2a <USBD_StdEPReq+0x9a>
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	f300 8145 	bgt.w	80061a8 <USBD_StdEPReq+0x318>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 809b 	beq.w	800605a <USBD_StdEPReq+0x1ca>
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d03c      	beq.n	8005fa2 <USBD_StdEPReq+0x112>
 8005f28:	e13e      	b.n	80061a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d002      	beq.n	8005f3c <USBD_StdEPReq+0xac>
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d016      	beq.n	8005f68 <USBD_StdEPReq+0xd8>
 8005f3a:	e02c      	b.n	8005f96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <USBD_StdEPReq+0xce>
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d00a      	beq.n	8005f5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f003 f96f 	bl	8009230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f003 f96b 	bl	8009230 <USBD_LL_StallEP>
 8005f5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f5c:	e020      	b.n	8005fa0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fc7a 	bl	800685a <USBD_CtlError>
              break;
 8005f66:	e01b      	b.n	8005fa0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	885b      	ldrh	r3, [r3, #2]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10e      	bne.n	8005f8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <USBD_StdEPReq+0xfe>
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	d008      	beq.n	8005f8e <USBD_StdEPReq+0xfe>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	88db      	ldrh	r3, [r3, #6]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f003 f951 	bl	8009230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fcb1 	bl	80068f6 <USBD_CtlSendStatus>

              break;
 8005f94:	e004      	b.n	8005fa0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc5e 	bl	800685a <USBD_CtlError>
              break;
 8005f9e:	bf00      	nop
          }
          break;
 8005fa0:	e107      	b.n	80061b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d002      	beq.n	8005fb4 <USBD_StdEPReq+0x124>
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d016      	beq.n	8005fe0 <USBD_StdEPReq+0x150>
 8005fb2:	e04b      	b.n	800604c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <USBD_StdEPReq+0x146>
 8005fba:	7bbb      	ldrb	r3, [r7, #14]
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d00a      	beq.n	8005fd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f003 f933 	bl	8009230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fca:	2180      	movs	r1, #128	; 0x80
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f003 f92f 	bl	8009230 <USBD_LL_StallEP>
 8005fd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fd4:	e040      	b.n	8006058 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc3e 	bl	800685a <USBD_CtlError>
              break;
 8005fde:	e03b      	b.n	8006058 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	885b      	ldrh	r3, [r3, #2]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d136      	bne.n	8006056 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f003 f939 	bl	800926e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fc7a 	bl	80068f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff fe38 	bl	8005c7c <USBD_CoreFindEP>
 800600c:	4603      	mov	r3, r0
 800600e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006010:	7b7b      	ldrb	r3, [r7, #13]
 8006012:	2bff      	cmp	r3, #255	; 0xff
 8006014:	d01f      	beq.n	8006056 <USBD_StdEPReq+0x1c6>
 8006016:	7b7b      	ldrb	r3, [r7, #13]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11c      	bne.n	8006056 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800601c:	7b7a      	ldrb	r2, [r7, #13]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006024:	7b7a      	ldrb	r2, [r7, #13]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	; 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006034:	7b7a      	ldrb	r2, [r7, #13]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	32ae      	adds	r2, #174	; 0xae
 800603a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
 8006046:	4603      	mov	r3, r0
 8006048:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800604a:	e004      	b.n	8006056 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fc03 	bl	800685a <USBD_CtlError>
              break;
 8006054:	e000      	b.n	8006058 <USBD_StdEPReq+0x1c8>
              break;
 8006056:	bf00      	nop
          }
          break;
 8006058:	e0ab      	b.n	80061b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d002      	beq.n	800606c <USBD_StdEPReq+0x1dc>
 8006066:	2b03      	cmp	r3, #3
 8006068:	d032      	beq.n	80060d0 <USBD_StdEPReq+0x240>
 800606a:	e097      	b.n	800619c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <USBD_StdEPReq+0x1f2>
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d004      	beq.n	8006082 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fbed 	bl	800685a <USBD_CtlError>
                break;
 8006080:	e091      	b.n	80061a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006086:	2b00      	cmp	r3, #0
 8006088:	da0b      	bge.n	80060a2 <USBD_StdEPReq+0x212>
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	3310      	adds	r3, #16
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	3304      	adds	r3, #4
 80060a0:	e00b      	b.n	80060ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	3304      	adds	r3, #4
 80060ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2202      	movs	r2, #2
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fbd7 	bl	800687c <USBD_CtlSendData>
              break;
 80060ce:	e06a      	b.n	80061a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da11      	bge.n	80060fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	3324      	adds	r3, #36	; 0x24
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d117      	bne.n	8006122 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fbb0 	bl	800685a <USBD_CtlError>
                  break;
 80060fa:	e054      	b.n	80061a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fb9d 	bl	800685a <USBD_CtlError>
                  break;
 8006120:	e041      	b.n	80061a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006122:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	da0b      	bge.n	8006142 <USBD_StdEPReq+0x2b2>
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	3310      	adds	r3, #16
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	3304      	adds	r3, #4
 8006140:	e00b      	b.n	800615a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	4413      	add	r3, r2
 8006158:	3304      	adds	r3, #4
 800615a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <USBD_StdEPReq+0x2d8>
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	2b80      	cmp	r3, #128	; 0x80
 8006166:	d103      	bne.n	8006170 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e00e      	b.n	800618e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f003 f899 	bl	80092ac <USBD_LL_IsStallEP>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e002      	b.n	800618e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2202      	movs	r2, #2
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fb71 	bl	800687c <USBD_CtlSendData>
              break;
 800619a:	e004      	b.n	80061a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fb5b 	bl	800685a <USBD_CtlError>
              break;
 80061a4:	bf00      	nop
          }
          break;
 80061a6:	e004      	b.n	80061b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fb55 	bl	800685a <USBD_CtlError>
          break;
 80061b0:	bf00      	nop
      }
      break;
 80061b2:	e005      	b.n	80061c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fb4f 	bl	800685a <USBD_CtlError>
      break;
 80061bc:	e000      	b.n	80061c0 <USBD_StdEPReq+0x330>
      break;
 80061be:	bf00      	nop
  }

  return ret;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	885b      	ldrh	r3, [r3, #2]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	2b06      	cmp	r3, #6
 80061ee:	f200 8128 	bhi.w	8006442 <USBD_GetDescriptor+0x276>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <USBD_GetDescriptor+0x2c>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006215 	.word	0x08006215
 80061fc:	0800622d 	.word	0x0800622d
 8006200:	0800626d 	.word	0x0800626d
 8006204:	08006443 	.word	0x08006443
 8006208:	08006443 	.word	0x08006443
 800620c:	080063e3 	.word	0x080063e3
 8006210:	0800640f 	.word	0x0800640f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	7c12      	ldrb	r2, [r2, #16]
 8006220:	f107 0108 	add.w	r1, r7, #8
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	60f8      	str	r0, [r7, #12]
      break;
 800622a:	e112      	b.n	8006452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7c1b      	ldrb	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10d      	bne.n	8006250 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f107 0208 	add.w	r2, r7, #8
 8006240:	4610      	mov	r0, r2
 8006242:	4798      	blx	r3
 8006244:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	2202      	movs	r2, #2
 800624c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800624e:	e100      	b.n	8006452 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	f107 0208 	add.w	r2, r7, #8
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
 8006260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	2202      	movs	r2, #2
 8006268:	701a      	strb	r2, [r3, #0]
      break;
 800626a:	e0f2      	b.n	8006452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	885b      	ldrh	r3, [r3, #2]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b05      	cmp	r3, #5
 8006274:	f200 80ac 	bhi.w	80063d0 <USBD_GetDescriptor+0x204>
 8006278:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <USBD_GetDescriptor+0xb4>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	08006299 	.word	0x08006299
 8006284:	080062cd 	.word	0x080062cd
 8006288:	08006301 	.word	0x08006301
 800628c:	08006335 	.word	0x08006335
 8006290:	08006369 	.word	0x08006369
 8006294:	0800639d 	.word	0x0800639d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	7c12      	ldrb	r2, [r2, #16]
 80062b0:	f107 0108 	add.w	r1, r7, #8
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
 80062b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ba:	e091      	b.n	80063e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 facb 	bl	800685a <USBD_CtlError>
            err++;
 80062c4:	7afb      	ldrb	r3, [r7, #11]
 80062c6:	3301      	adds	r3, #1
 80062c8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ca:	e089      	b.n	80063e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	7c12      	ldrb	r2, [r2, #16]
 80062e4:	f107 0108 	add.w	r1, r7, #8
 80062e8:	4610      	mov	r0, r2
 80062ea:	4798      	blx	r3
 80062ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ee:	e077      	b.n	80063e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fab1 	bl	800685a <USBD_CtlError>
            err++;
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	3301      	adds	r3, #1
 80062fc:	72fb      	strb	r3, [r7, #11]
          break;
 80062fe:	e06f      	b.n	80063e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	7c12      	ldrb	r2, [r2, #16]
 8006318:	f107 0108 	add.w	r1, r7, #8
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
 8006320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006322:	e05d      	b.n	80063e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa97 	bl	800685a <USBD_CtlError>
            err++;
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	3301      	adds	r3, #1
 8006330:	72fb      	strb	r3, [r7, #11]
          break;
 8006332:	e055      	b.n	80063e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	7c12      	ldrb	r2, [r2, #16]
 800634c:	f107 0108 	add.w	r1, r7, #8
 8006350:	4610      	mov	r0, r2
 8006352:	4798      	blx	r3
 8006354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006356:	e043      	b.n	80063e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa7d 	bl	800685a <USBD_CtlError>
            err++;
 8006360:	7afb      	ldrb	r3, [r7, #11]
 8006362:	3301      	adds	r3, #1
 8006364:	72fb      	strb	r3, [r7, #11]
          break;
 8006366:	e03b      	b.n	80063e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	7c12      	ldrb	r2, [r2, #16]
 8006380:	f107 0108 	add.w	r1, r7, #8
 8006384:	4610      	mov	r0, r2
 8006386:	4798      	blx	r3
 8006388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800638a:	e029      	b.n	80063e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa63 	bl	800685a <USBD_CtlError>
            err++;
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	3301      	adds	r3, #1
 8006398:	72fb      	strb	r3, [r7, #11]
          break;
 800639a:	e021      	b.n	80063e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	7c12      	ldrb	r2, [r2, #16]
 80063b4:	f107 0108 	add.w	r1, r7, #8
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
 80063bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063be:	e00f      	b.n	80063e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa49 	bl	800685a <USBD_CtlError>
            err++;
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	3301      	adds	r3, #1
 80063cc:	72fb      	strb	r3, [r7, #11]
          break;
 80063ce:	e007      	b.n	80063e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa41 	bl	800685a <USBD_CtlError>
          err++;
 80063d8:	7afb      	ldrb	r3, [r7, #11]
 80063da:	3301      	adds	r3, #1
 80063dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80063de:	bf00      	nop
      }
      break;
 80063e0:	e037      	b.n	8006452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	7c1b      	ldrb	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f2:	f107 0208 	add.w	r2, r7, #8
 80063f6:	4610      	mov	r0, r2
 80063f8:	4798      	blx	r3
 80063fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063fc:	e029      	b.n	8006452 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fa2a 	bl	800685a <USBD_CtlError>
        err++;
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	3301      	adds	r3, #1
 800640a:	72fb      	strb	r3, [r7, #11]
      break;
 800640c:	e021      	b.n	8006452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	7c1b      	ldrb	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	f107 0208 	add.w	r2, r7, #8
 8006422:	4610      	mov	r0, r2
 8006424:	4798      	blx	r3
 8006426:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3301      	adds	r3, #1
 800642c:	2207      	movs	r2, #7
 800642e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006430:	e00f      	b.n	8006452 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fa10 	bl	800685a <USBD_CtlError>
        err++;
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	3301      	adds	r3, #1
 800643e:	72fb      	strb	r3, [r7, #11]
      break;
 8006440:	e007      	b.n	8006452 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa08 	bl	800685a <USBD_CtlError>
      err++;
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	3301      	adds	r3, #1
 800644e:	72fb      	strb	r3, [r7, #11]
      break;
 8006450:	bf00      	nop
  }

  if (err != 0U)
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11e      	bne.n	8006496 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	88db      	ldrh	r3, [r3, #6]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d016      	beq.n	800648e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006460:	893b      	ldrh	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00e      	beq.n	8006484 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88da      	ldrh	r2, [r3, #6]
 800646a:	893b      	ldrh	r3, [r7, #8]
 800646c:	4293      	cmp	r3, r2
 800646e:	bf28      	it	cs
 8006470:	4613      	movcs	r3, r2
 8006472:	b29b      	uxth	r3, r3
 8006474:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006476:	893b      	ldrh	r3, [r7, #8]
 8006478:	461a      	mov	r2, r3
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9fd 	bl	800687c <USBD_CtlSendData>
 8006482:	e009      	b.n	8006498 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f9e7 	bl	800685a <USBD_CtlError>
 800648c:	e004      	b.n	8006498 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa31 	bl	80068f6 <USBD_CtlSendStatus>
 8006494:	e000      	b.n	8006498 <USBD_GetDescriptor+0x2cc>
    return;
 8006496:	bf00      	nop
  }
}
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop

080064a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	889b      	ldrh	r3, [r3, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d131      	bne.n	8006516 <USBD_SetAddress+0x76>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	88db      	ldrh	r3, [r3, #6]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d12d      	bne.n	8006516 <USBD_SetAddress+0x76>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	885b      	ldrh	r3, [r3, #2]
 80064be:	2b7f      	cmp	r3, #127	; 0x7f
 80064c0:	d829      	bhi.n	8006516 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	885b      	ldrh	r3, [r3, #2]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d104      	bne.n	80064e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9bc 	bl	800685a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e2:	e01d      	b.n	8006520 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	7bfa      	ldrb	r2, [r7, #15]
 80064e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f002 ff07 	bl	8009304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9fd 	bl	80068f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650a:	e009      	b.n	8006520 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006514:	e004      	b.n	8006520 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f99e 	bl	800685a <USBD_CtlError>
  }
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	885b      	ldrh	r3, [r3, #2]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	4b4e      	ldr	r3, [pc, #312]	; (8006678 <USBD_SetConfig+0x150>)
 800653e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006540:	4b4d      	ldr	r3, [pc, #308]	; (8006678 <USBD_SetConfig+0x150>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d905      	bls.n	8006554 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f985 	bl	800685a <USBD_CtlError>
    return USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	e08c      	b.n	800666e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d002      	beq.n	8006566 <USBD_SetConfig+0x3e>
 8006560:	2b03      	cmp	r3, #3
 8006562:	d029      	beq.n	80065b8 <USBD_SetConfig+0x90>
 8006564:	e075      	b.n	8006652 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006566:	4b44      	ldr	r3, [pc, #272]	; (8006678 <USBD_SetConfig+0x150>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d020      	beq.n	80065b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800656e:	4b42      	ldr	r3, [pc, #264]	; (8006678 <USBD_SetConfig+0x150>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006578:	4b3f      	ldr	r3, [pc, #252]	; (8006678 <USBD_SetConfig+0x150>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff f83d 	bl	80055fe <USBD_SetClassConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f962 	bl	800685a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800659e:	e065      	b.n	800666c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f9a8 	bl	80068f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2203      	movs	r2, #3
 80065aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80065ae:	e05d      	b.n	800666c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9a0 	bl	80068f6 <USBD_CtlSendStatus>
      break;
 80065b6:	e059      	b.n	800666c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80065b8:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <USBD_SetConfig+0x150>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d112      	bne.n	80065e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80065c8:	4b2b      	ldr	r3, [pc, #172]	; (8006678 <USBD_SetConfig+0x150>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065d2:	4b29      	ldr	r3, [pc, #164]	; (8006678 <USBD_SetConfig+0x150>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff f82c 	bl	8005636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f989 	bl	80068f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80065e4:	e042      	b.n	800666c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80065e6:	4b24      	ldr	r3, [pc, #144]	; (8006678 <USBD_SetConfig+0x150>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d02a      	beq.n	800664a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff f81a 	bl	8005636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006602:	4b1d      	ldr	r3, [pc, #116]	; (8006678 <USBD_SetConfig+0x150>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800660c:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <USBD_SetConfig+0x150>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fe fff3 	bl	80055fe <USBD_SetClassConfig>
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f918 	bl	800685a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fe ffff 	bl	8005636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006640:	e014      	b.n	800666c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f957 	bl	80068f6 <USBD_CtlSendStatus>
      break;
 8006648:	e010      	b.n	800666c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f953 	bl	80068f6 <USBD_CtlSendStatus>
      break;
 8006650:	e00c      	b.n	800666c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f900 	bl	800685a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <USBD_SetConfig+0x150>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fe ffe8 	bl	8005636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006666:	2303      	movs	r3, #3
 8006668:	73fb      	strb	r3, [r7, #15]
      break;
 800666a:	bf00      	nop
  }

  return ret;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	200001cc 	.word	0x200001cc

0800667c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	88db      	ldrh	r3, [r3, #6]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d004      	beq.n	8006698 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f8e2 	bl	800685a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006696:	e023      	b.n	80066e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	dc02      	bgt.n	80066aa <USBD_GetConfig+0x2e>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dc03      	bgt.n	80066b0 <USBD_GetConfig+0x34>
 80066a8:	e015      	b.n	80066d6 <USBD_GetConfig+0x5a>
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d00b      	beq.n	80066c6 <USBD_GetConfig+0x4a>
 80066ae:	e012      	b.n	80066d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3308      	adds	r3, #8
 80066ba:	2201      	movs	r2, #1
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f8dc 	bl	800687c <USBD_CtlSendData>
        break;
 80066c4:	e00c      	b.n	80066e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2201      	movs	r2, #1
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8d4 	bl	800687c <USBD_CtlSendData>
        break;
 80066d4:	e004      	b.n	80066e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8be 	bl	800685a <USBD_CtlError>
        break;
 80066de:	bf00      	nop
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d81e      	bhi.n	800673e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	88db      	ldrh	r3, [r3, #6]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d004      	beq.n	8006712 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f8a5 	bl	800685a <USBD_CtlError>
        break;
 8006710:	e01a      	b.n	8006748 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f043 0202 	orr.w	r2, r3, #2
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	330c      	adds	r3, #12
 8006732:	2202      	movs	r2, #2
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8a0 	bl	800687c <USBD_CtlSendData>
      break;
 800673c:	e004      	b.n	8006748 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f88a 	bl	800685a <USBD_CtlError>
      break;
 8006746:	bf00      	nop
  }
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	885b      	ldrh	r3, [r3, #2]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f8c3 	bl	80068f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006770:	e013      	b.n	800679a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d10b      	bne.n	8006792 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	889b      	ldrh	r3, [r3, #4]
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	b29b      	uxth	r3, r3
 8006782:	b2da      	uxtb	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f8b3 	bl	80068f6 <USBD_CtlSendStatus>
}
 8006790:	e003      	b.n	800679a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f860 	bl	800685a <USBD_CtlError>
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d80b      	bhi.n	80067d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	885b      	ldrh	r3, [r3, #2]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d10c      	bne.n	80067dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f893 	bl	80068f6 <USBD_CtlSendStatus>
      }
      break;
 80067d0:	e004      	b.n	80067dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f840 	bl	800685a <USBD_CtlError>
      break;
 80067da:	e000      	b.n	80067de <USBD_ClrFeature+0x3c>
      break;
 80067dc:	bf00      	nop
  }
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	781a      	ldrb	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fa40 	bl	8005c96 <SWAPBYTE>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f7ff fa33 	bl	8005c96 <SWAPBYTE>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7ff fa26 	bl	8005c96 <SWAPBYTE>
 800684a:	4603      	mov	r3, r0
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	80da      	strh	r2, [r3, #6]
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006864:	2180      	movs	r1, #128	; 0x80
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f002 fce2 	bl	8009230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800686c:	2100      	movs	r1, #0
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f002 fcde 	bl	8009230 <USBD_LL_StallEP>
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2202      	movs	r2, #2
 800688c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	2100      	movs	r1, #0
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f002 fd4d 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	2100      	movs	r1, #0
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f002 fd3c 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	2100      	movs	r1, #0
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f002 fd4c 	bl	8009384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2204      	movs	r2, #4
 8006902:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006906:	2300      	movs	r3, #0
 8006908:	2200      	movs	r2, #0
 800690a:	2100      	movs	r1, #0
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f002 fd18 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2205      	movs	r2, #5
 8006928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800692c:	2300      	movs	r3, #0
 800692e:	2200      	movs	r2, #0
 8006930:	2100      	movs	r1, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f002 fd26 	bl	8009384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <__NVIC_SetPriority>:
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006954:	2b00      	cmp	r3, #0
 8006956:	db0a      	blt.n	800696e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	b2da      	uxtb	r2, r3
 800695c:	490c      	ldr	r1, [pc, #48]	; (8006990 <__NVIC_SetPriority+0x4c>)
 800695e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006962:	0112      	lsls	r2, r2, #4
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	440b      	add	r3, r1
 8006968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800696c:	e00a      	b.n	8006984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4908      	ldr	r1, [pc, #32]	; (8006994 <__NVIC_SetPriority+0x50>)
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	3b04      	subs	r3, #4
 800697c:	0112      	lsls	r2, r2, #4
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	440b      	add	r3, r1
 8006982:	761a      	strb	r2, [r3, #24]
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	e000e100 	.word	0xe000e100
 8006994:	e000ed00 	.word	0xe000ed00

08006998 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800699c:	2100      	movs	r1, #0
 800699e:	f06f 0004 	mvn.w	r0, #4
 80069a2:	f7ff ffcf 	bl	8006944 <__NVIC_SetPriority>
#endif
}
 80069a6:	bf00      	nop
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b2:	f3ef 8305 	mrs	r3, IPSR
 80069b6:	603b      	str	r3, [r7, #0]
  return(result);
 80069b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80069be:	f06f 0305 	mvn.w	r3, #5
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	e00c      	b.n	80069e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <osKernelInitialize+0x44>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <osKernelInitialize+0x44>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	607b      	str	r3, [r7, #4]
 80069d8:	e002      	b.n	80069e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80069da:	f04f 33ff 	mov.w	r3, #4294967295
 80069de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069e0:	687b      	ldr	r3, [r7, #4]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200001d0 	.word	0x200001d0

080069f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069fa:	f3ef 8305 	mrs	r3, IPSR
 80069fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006a00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a06:	f06f 0305 	mvn.w	r3, #5
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	e010      	b.n	8006a30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <osKernelStart+0x48>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d109      	bne.n	8006a2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a16:	f7ff ffbf 	bl	8006998 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <osKernelStart+0x48>)
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a20:	f000 ff56 	bl	80078d0 <vTaskStartScheduler>
      stat = osOK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	e002      	b.n	8006a30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a30:	687b      	ldr	r3, [r7, #4]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200001d0 	.word	0x200001d0

08006a40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a07      	ldr	r2, [pc, #28]	; (8006a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8006a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <vApplicationGetIdleTaskMemory+0x30>)
 8006a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	601a      	str	r2, [r3, #0]
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	200001d4 	.word	0x200001d4
 8006a70:	20000290 	.word	0x20000290

08006a74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a07      	ldr	r2, [pc, #28]	; (8006aa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <vApplicationGetTimerTaskMemory+0x30>)
 8006a8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20000490 	.word	0x20000490
 8006aa4:	2000054c 	.word	0x2000054c

08006aa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f103 0208 	add.w	r2, r3, #8
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f103 0208 	add.w	r2, r3, #8
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f103 0208 	add.w	r2, r3, #8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d103      	bne.n	8006b6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	e00c      	b.n	8006b84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e002      	b.n	8006b78 <vListInsert+0x2e>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d2f6      	bcs.n	8006b72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6892      	ldr	r2, [r2, #8]
 8006bd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6852      	ldr	r2, [r2, #4]
 8006bdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d103      	bne.n	8006bf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1e5a      	subs	r2, r3, #1
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c3a:	f002 f803 	bl	8008c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	68f9      	ldr	r1, [r7, #12]
 8006c48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	441a      	add	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	68f9      	ldr	r1, [r7, #12]
 8006c6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	22ff      	movs	r2, #255	; 0xff
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d114      	bne.n	8006cba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01a      	beq.n	8006cce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3310      	adds	r3, #16
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f8b1 	bl	8007e04 <xTaskRemoveFromEventList>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d012      	beq.n	8006cce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <xQueueGenericReset+0xcc>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	e009      	b.n	8006cce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fef2 	bl	8006aa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3324      	adds	r3, #36	; 0x24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff feed 	bl	8006aa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cce:	f001 ffe9 	bl	8008ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cd2:	2301      	movs	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08e      	sub	sp, #56	; 0x38
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10a      	bne.n	8006d0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <xQueueGenericCreateStatic+0x52>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <xQueueGenericCreateStatic+0x56>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGenericCreateStatic+0x58>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	623b      	str	r3, [r7, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <xQueueGenericCreateStatic+0x7e>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <xQueueGenericCreateStatic+0x82>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueGenericCreateStatic+0x84>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	61fb      	str	r3, [r7, #28]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d7e:	2350      	movs	r3, #80	; 0x50
 8006d80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b50      	cmp	r3, #80	; 0x50
 8006d86:	d00a      	beq.n	8006d9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	61bb      	str	r3, [r7, #24]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00d      	beq.n	8006dc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006db2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f805 	bl	8006dd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3730      	adds	r7, #48	; 0x30
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	e002      	b.n	8006df2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dfe:	2101      	movs	r1, #1
 8006e00:	69b8      	ldr	r0, [r7, #24]
 8006e02:	f7ff ff05 	bl	8006c10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	; 0x38
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e26:	2300      	movs	r3, #0
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xQueueGenericSend+0x32>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d103      	bne.n	8006e58 <xQueueGenericSend+0x40>
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <xQueueGenericSend+0x44>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <xQueueGenericSend+0x46>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <xQueueGenericSend+0x60>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x6e>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <xQueueGenericSend+0x72>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <xQueueGenericSend+0x74>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	623b      	str	r3, [r7, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea6:	f001 f96f 	bl	8008188 <xTaskGetSchedulerState>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <xQueueGenericSend+0x9e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <xQueueGenericSend+0xa2>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <xQueueGenericSend+0xa4>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	61fb      	str	r3, [r7, #28]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ed6:	f001 feb5 	bl	8008c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d302      	bcc.n	8006eec <xQueueGenericSend+0xd4>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d129      	bne.n	8006f40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ef2:	f000 fa0b 	bl	800730c <prvCopyDataToQueue>
 8006ef6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d010      	beq.n	8006f22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	3324      	adds	r3, #36	; 0x24
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 ff7d 	bl	8007e04 <xTaskRemoveFromEventList>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d013      	beq.n	8006f38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f10:	4b3f      	ldr	r3, [pc, #252]	; (8007010 <xQueueGenericSend+0x1f8>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	e00a      	b.n	8006f38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f28:	4b39      	ldr	r3, [pc, #228]	; (8007010 <xQueueGenericSend+0x1f8>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f38:	f001 feb4 	bl	8008ca4 <vPortExitCritical>
				return pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e063      	b.n	8007008 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f46:	f001 fead 	bl	8008ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e05c      	b.n	8007008 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 ffb7 	bl	8007ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f62:	f001 fe9f 	bl	8008ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f66:	f000 fd23 	bl	80079b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f6a:	f001 fe6b 	bl	8008c44 <vPortEnterCritical>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d103      	bne.n	8006f84 <xQueueGenericSend+0x16c>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d103      	bne.n	8006f9a <xQueueGenericSend+0x182>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f9a:	f001 fe83 	bl	8008ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f9e:	1d3a      	adds	r2, r7, #4
 8006fa0:	f107 0314 	add.w	r3, r7, #20
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 ffa6 	bl	8007ef8 <xTaskCheckForTimeOut>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d124      	bne.n	8006ffc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb4:	f000 faa2 	bl	80074fc <prvIsQueueFull>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fecc 	bl	8007d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fce:	f000 fa2d 	bl	800742c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fd2:	f000 fcfb 	bl	80079cc <xTaskResumeAll>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f af7c 	bne.w	8006ed6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <xQueueGenericSend+0x1f8>)
 8006fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	e772      	b.n	8006ed6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff2:	f000 fa1b 	bl	800742c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ff6:	f000 fce9 	bl	80079cc <xTaskResumeAll>
 8006ffa:	e76c      	b.n	8006ed6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ffe:	f000 fa15 	bl	800742c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007002:	f000 fce3 	bl	80079cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007008:	4618      	mov	r0, r3
 800700a:	3738      	adds	r7, #56	; 0x38
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	e000ed04 	.word	0xe000ed04

08007014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b090      	sub	sp, #64	; 0x40
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <xQueueGenericSendFromISR+0x3c>
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <xQueueGenericSendFromISR+0x40>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <xQueueGenericSendFromISR+0x42>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d103      	bne.n	800707e <xQueueGenericSendFromISR+0x6a>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <xQueueGenericSendFromISR+0x6e>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <xQueueGenericSendFromISR+0x70>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	623b      	str	r3, [r7, #32]
}
 800709a:	bf00      	nop
 800709c:	e7fe      	b.n	800709c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800709e:	f001 feb3 	bl	8008e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070a2:	f3ef 8211 	mrs	r2, BASEPRI
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	61fa      	str	r2, [r7, #28]
 80070b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <xQueueGenericSendFromISR+0xbc>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d12f      	bne.n	8007130 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070e6:	f000 f911 	bl	800730c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f2:	d112      	bne.n	800711a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d016      	beq.n	800712a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	3324      	adds	r3, #36	; 0x24
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fe7f 	bl	8007e04 <xTaskRemoveFromEventList>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00e      	beq.n	800712a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e007      	b.n	800712a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800711a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800711e:	3301      	adds	r3, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	b25a      	sxtb	r2, r3
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800712a:	2301      	movs	r3, #1
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800712e:	e001      	b.n	8007134 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007130:	2300      	movs	r3, #0
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800713e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007142:	4618      	mov	r0, r3
 8007144:	3740      	adds	r7, #64	; 0x40
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	; 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <xQueueReceive+0x30>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	623b      	str	r3, [r7, #32]
}
 8007178:	bf00      	nop
 800717a:	e7fe      	b.n	800717a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <xQueueReceive+0x3e>
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <xQueueReceive+0x42>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueReceive+0x44>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <xQueueReceive+0x5e>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	61fb      	str	r3, [r7, #28]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071aa:	f000 ffed 	bl	8008188 <xTaskGetSchedulerState>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <xQueueReceive+0x6e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <xQueueReceive+0x72>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueReceive+0x74>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueReceive+0x8e>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	61bb      	str	r3, [r7, #24]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071da:	f001 fd33 	bl	8008c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01f      	beq.n	800722a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ee:	f000 f8f7 	bl	80073e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00f      	beq.n	8007222 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	3310      	adds	r3, #16
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fdfc 	bl	8007e04 <xTaskRemoveFromEventList>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007212:	4b3d      	ldr	r3, [pc, #244]	; (8007308 <xQueueReceive+0x1bc>)
 8007214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007222:	f001 fd3f 	bl	8008ca4 <vPortExitCritical>
				return pdPASS;
 8007226:	2301      	movs	r3, #1
 8007228:	e069      	b.n	80072fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007230:	f001 fd38 	bl	8008ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007234:	2300      	movs	r3, #0
 8007236:	e062      	b.n	80072fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800723e:	f107 0310 	add.w	r3, r7, #16
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fe42 	bl	8007ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800724c:	f001 fd2a 	bl	8008ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007250:	f000 fbae 	bl	80079b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007254:	f001 fcf6 	bl	8008c44 <vPortEnterCritical>
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725e:	b25b      	sxtb	r3, r3
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d103      	bne.n	800726e <xQueueReceive+0x122>
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007274:	b25b      	sxtb	r3, r3
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d103      	bne.n	8007284 <xQueueReceive+0x138>
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007284:	f001 fd0e 	bl	8008ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007288:	1d3a      	adds	r2, r7, #4
 800728a:	f107 0310 	add.w	r3, r7, #16
 800728e:	4611      	mov	r1, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fe31 	bl	8007ef8 <xTaskCheckForTimeOut>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d123      	bne.n	80072e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800729c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729e:	f000 f917 	bl	80074d0 <prvIsQueueEmpty>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fd57 	bl	8007d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b8:	f000 f8b8 	bl	800742c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072bc:	f000 fb86 	bl	80079cc <xTaskResumeAll>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d189      	bne.n	80071da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <xQueueReceive+0x1bc>)
 80072c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	e780      	b.n	80071da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072da:	f000 f8a7 	bl	800742c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072de:	f000 fb75 	bl	80079cc <xTaskResumeAll>
 80072e2:	e77a      	b.n	80071da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e6:	f000 f8a1 	bl	800742c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072ea:	f000 fb6f 	bl	80079cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f0:	f000 f8ee 	bl	80074d0 <prvIsQueueEmpty>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f43f af6f 	beq.w	80071da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3730      	adds	r7, #48	; 0x30
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d14d      	bne.n	80073ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 ff44 	bl	80081c4 <xTaskPriorityDisinherit>
 800733c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	e043      	b.n	80073ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d119      	bne.n	8007380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6858      	ldr	r0, [r3, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	461a      	mov	r2, r3
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	f002 f888 	bl	800946c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d32b      	bcc.n	80073ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	e026      	b.n	80073ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68d8      	ldr	r0, [r3, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	461a      	mov	r2, r3
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	f002 f86e 	bl	800946c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	425b      	negs	r3, r3
 800739a:	441a      	add	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d207      	bcs.n	80073bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	425b      	negs	r3, r3
 80073b6:	441a      	add	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d105      	bne.n	80073ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073d6:	697b      	ldr	r3, [r7, #20]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d018      	beq.n	8007424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	441a      	add	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	429a      	cmp	r2, r3
 800740a:	d303      	bcc.n	8007414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68d9      	ldr	r1, [r3, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	461a      	mov	r2, r3
 800741e:	6838      	ldr	r0, [r7, #0]
 8007420:	f002 f824 	bl	800946c <memcpy>
	}
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007434:	f001 fc06 	bl	8008c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800743e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007440:	e011      	b.n	8007466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d012      	beq.n	8007470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3324      	adds	r3, #36	; 0x24
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fcd8 	bl	8007e04 <xTaskRemoveFromEventList>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800745a:	f000 fdaf 	bl	8007fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	3b01      	subs	r3, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	dce9      	bgt.n	8007442 <prvUnlockQueue+0x16>
 800746e:	e000      	b.n	8007472 <prvUnlockQueue+0x46>
					break;
 8007470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	22ff      	movs	r2, #255	; 0xff
 8007476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800747a:	f001 fc13 	bl	8008ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800747e:	f001 fbe1 	bl	8008c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748a:	e011      	b.n	80074b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d012      	beq.n	80074ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3310      	adds	r3, #16
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fcb3 	bl	8007e04 <xTaskRemoveFromEventList>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074a4:	f000 fd8a 	bl	8007fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dce9      	bgt.n	800748c <prvUnlockQueue+0x60>
 80074b8:	e000      	b.n	80074bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	22ff      	movs	r2, #255	; 0xff
 80074c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074c4:	f001 fbee 	bl	8008ca4 <vPortExitCritical>
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074d8:	f001 fbb4 	bl	8008c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074e4:	2301      	movs	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e001      	b.n	80074ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ee:	f001 fbd9 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 80074f2:	68fb      	ldr	r3, [r7, #12]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007504:	f001 fb9e 	bl	8008c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	429a      	cmp	r2, r3
 8007512:	d102      	bne.n	800751a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e001      	b.n	800751e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800751e:	f001 fbc1 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e014      	b.n	8007566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800753c:	4a0f      	ldr	r2, [pc, #60]	; (800757c <vQueueAddToRegistry+0x50>)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007548:	490c      	ldr	r1, [pc, #48]	; (800757c <vQueueAddToRegistry+0x50>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007552:	4a0a      	ldr	r2, [pc, #40]	; (800757c <vQueueAddToRegistry+0x50>)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800755e:	e006      	b.n	800756e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3301      	adds	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b07      	cmp	r3, #7
 800756a:	d9e7      	bls.n	800753c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	2000094c 	.word	0x2000094c

08007580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007590:	f001 fb58 	bl	8008c44 <vPortEnterCritical>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800759a:	b25b      	sxtb	r3, r3
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d103      	bne.n	80075aa <vQueueWaitForMessageRestricted+0x2a>
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d103      	bne.n	80075c0 <vQueueWaitForMessageRestricted+0x40>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c0:	f001 fb70 	bl	8008ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fbe9 	bl	8007dac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075da:	6978      	ldr	r0, [r7, #20]
 80075dc:	f7ff ff26 	bl	800742c <prvUnlockQueue>
	}
 80075e0:	bf00      	nop
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08e      	sub	sp, #56	; 0x38
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <xTaskCreateStatic+0x2a>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	623b      	str	r3, [r7, #32]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <xTaskCreateStatic+0x46>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	61fb      	str	r3, [r7, #28]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800762e:	23bc      	movs	r3, #188	; 0xbc
 8007630:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2bbc      	cmp	r3, #188	; 0xbc
 8007636:	d00a      	beq.n	800764e <xTaskCreateStatic+0x66>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	61bb      	str	r3, [r7, #24]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800764e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01e      	beq.n	8007694 <xTaskCreateStatic+0xac>
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01b      	beq.n	8007694 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007664:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	2202      	movs	r2, #2
 800766a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800766e:	2300      	movs	r3, #0
 8007670:	9303      	str	r3, [sp, #12]
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	9302      	str	r3, [sp, #8]
 8007676:	f107 0314 	add.w	r3, r7, #20
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f80c 	bl	80076a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800768c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800768e:	f000 f8af 	bl	80077f0 <prvAddNewTaskToReadyList>
 8007692:	e001      	b.n	8007698 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007698:	697b      	ldr	r3, [r7, #20]
	}
 800769a:	4618      	mov	r0, r3
 800769c:	3728      	adds	r7, #40	; 0x28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	461a      	mov	r2, r3
 80076bc:	21a5      	movs	r1, #165	; 0xa5
 80076be:	f001 fee3 	bl	8009488 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	3b01      	subs	r3, #1
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	f023 0307 	bic.w	r3, r3, #7
 80076da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	617b      	str	r3, [r7, #20]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d01f      	beq.n	8007742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007702:	2300      	movs	r3, #0
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e012      	b.n	800772e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	7819      	ldrb	r1, [r3, #0]
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	3334      	adds	r3, #52	; 0x34
 8007718:	460a      	mov	r2, r1
 800771a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d006      	beq.n	8007736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	3301      	adds	r3, #1
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	2b0f      	cmp	r3, #15
 8007732:	d9e9      	bls.n	8007708 <prvInitialiseNewTask+0x64>
 8007734:	e000      	b.n	8007738 <prvInitialiseNewTask+0x94>
			{
				break;
 8007736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007740:	e003      	b.n	800774a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	2b37      	cmp	r3, #55	; 0x37
 800774e:	d901      	bls.n	8007754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007750:	2337      	movs	r3, #55	; 0x37
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800775e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	2200      	movs	r2, #0
 8007764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	3304      	adds	r3, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff f9bc 	bl	8006ae8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	3318      	adds	r3, #24
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff f9b7 	bl	8006ae8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2200      	movs	r2, #0
 800779c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	3354      	adds	r3, #84	; 0x54
 80077a4:	2260      	movs	r2, #96	; 0x60
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fe6d 	bl	8009488 <memset>
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	4a0c      	ldr	r2, [pc, #48]	; (80077e4 <prvInitialiseNewTask+0x140>)
 80077b2:	659a      	str	r2, [r3, #88]	; 0x58
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	4a0c      	ldr	r2, [pc, #48]	; (80077e8 <prvInitialiseNewTask+0x144>)
 80077b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	4a0b      	ldr	r2, [pc, #44]	; (80077ec <prvInitialiseNewTask+0x148>)
 80077be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	69b8      	ldr	r0, [r7, #24]
 80077c6:	f001 f90d 	bl	80089e4 <pxPortInitialiseStack>
 80077ca:	4602      	mov	r2, r0
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077dc:	bf00      	nop
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	08009694 	.word	0x08009694
 80077e8:	080096b4 	.word	0x080096b4
 80077ec:	08009674 	.word	0x08009674

080077f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077f8:	f001 fa24 	bl	8008c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077fc:	4b2d      	ldr	r3, [pc, #180]	; (80078b4 <prvAddNewTaskToReadyList+0xc4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	4a2c      	ldr	r2, [pc, #176]	; (80078b4 <prvAddNewTaskToReadyList+0xc4>)
 8007804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007806:	4b2c      	ldr	r3, [pc, #176]	; (80078b8 <prvAddNewTaskToReadyList+0xc8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800780e:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <prvAddNewTaskToReadyList+0xc8>)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007814:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <prvAddNewTaskToReadyList+0xc4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d110      	bne.n	800783e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800781c:	f000 fbf2 	bl	8008004 <prvInitialiseTaskLists>
 8007820:	e00d      	b.n	800783e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007822:	4b26      	ldr	r3, [pc, #152]	; (80078bc <prvAddNewTaskToReadyList+0xcc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800782a:	4b23      	ldr	r3, [pc, #140]	; (80078b8 <prvAddNewTaskToReadyList+0xc8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	429a      	cmp	r2, r3
 8007836:	d802      	bhi.n	800783e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007838:	4a1f      	ldr	r2, [pc, #124]	; (80078b8 <prvAddNewTaskToReadyList+0xc8>)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800783e:	4b20      	ldr	r3, [pc, #128]	; (80078c0 <prvAddNewTaskToReadyList+0xd0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	4a1e      	ldr	r2, [pc, #120]	; (80078c0 <prvAddNewTaskToReadyList+0xd0>)
 8007846:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007848:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <prvAddNewTaskToReadyList+0xd0>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007854:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <prvAddNewTaskToReadyList+0xd4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d903      	bls.n	8007864 <prvAddNewTaskToReadyList+0x74>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	4a18      	ldr	r2, [pc, #96]	; (80078c4 <prvAddNewTaskToReadyList+0xd4>)
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4a15      	ldr	r2, [pc, #84]	; (80078c8 <prvAddNewTaskToReadyList+0xd8>)
 8007872:	441a      	add	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f7ff f941 	bl	8006b02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007880:	f001 fa10 	bl	8008ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007884:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <prvAddNewTaskToReadyList+0xcc>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <prvAddNewTaskToReadyList+0xc8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	429a      	cmp	r2, r3
 8007898:	d207      	bcs.n	80078aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <prvAddNewTaskToReadyList+0xdc>)
 800789c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000e60 	.word	0x20000e60
 80078b8:	2000098c 	.word	0x2000098c
 80078bc:	20000e6c 	.word	0x20000e6c
 80078c0:	20000e7c 	.word	0x20000e7c
 80078c4:	20000e68 	.word	0x20000e68
 80078c8:	20000990 	.word	0x20000990
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078de:	463a      	mov	r2, r7
 80078e0:	1d39      	adds	r1, r7, #4
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff f8aa 	bl	8006a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	9202      	str	r2, [sp, #8]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2300      	movs	r3, #0
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	460a      	mov	r2, r1
 80078fe:	4924      	ldr	r1, [pc, #144]	; (8007990 <vTaskStartScheduler+0xc0>)
 8007900:	4824      	ldr	r0, [pc, #144]	; (8007994 <vTaskStartScheduler+0xc4>)
 8007902:	f7ff fe71 	bl	80075e8 <xTaskCreateStatic>
 8007906:	4603      	mov	r3, r0
 8007908:	4a23      	ldr	r2, [pc, #140]	; (8007998 <vTaskStartScheduler+0xc8>)
 800790a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800790c:	4b22      	ldr	r3, [pc, #136]	; (8007998 <vTaskStartScheduler+0xc8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007914:	2301      	movs	r3, #1
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e001      	b.n	800791e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d102      	bne.n	800792a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007924:	f000 fd10 	bl	8008348 <xTimerCreateTimerTask>
 8007928:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d11b      	bne.n	8007968 <vTaskStartScheduler+0x98>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	613b      	str	r3, [r7, #16]
}
 8007942:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007944:	4b15      	ldr	r3, [pc, #84]	; (800799c <vTaskStartScheduler+0xcc>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3354      	adds	r3, #84	; 0x54
 800794a:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <vTaskStartScheduler+0xd0>)
 800794c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800794e:	4b15      	ldr	r3, [pc, #84]	; (80079a4 <vTaskStartScheduler+0xd4>)
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <vTaskStartScheduler+0xd8>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800795c:	4b13      	ldr	r3, [pc, #76]	; (80079ac <vTaskStartScheduler+0xdc>)
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007962:	f001 f8cd 	bl	8008b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007966:	e00e      	b.n	8007986 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d10a      	bne.n	8007986 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <vTaskStartScheduler+0xb4>
}
 8007986:	bf00      	nop
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	08009634 	.word	0x08009634
 8007994:	08007fd5 	.word	0x08007fd5
 8007998:	20000e84 	.word	0x20000e84
 800799c:	2000098c 	.word	0x2000098c
 80079a0:	20000010 	.word	0x20000010
 80079a4:	20000e80 	.word	0x20000e80
 80079a8:	20000e6c 	.word	0x20000e6c
 80079ac:	20000e64 	.word	0x20000e64

080079b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <vTaskSuspendAll+0x18>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4a03      	ldr	r2, [pc, #12]	; (80079c8 <vTaskSuspendAll+0x18>)
 80079bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079be:	bf00      	nop
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	20000e88 	.word	0x20000e88

080079cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079da:	4b42      	ldr	r3, [pc, #264]	; (8007ae4 <xTaskResumeAll+0x118>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	603b      	str	r3, [r7, #0]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079f8:	f001 f924 	bl	8008c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079fc:	4b39      	ldr	r3, [pc, #228]	; (8007ae4 <xTaskResumeAll+0x118>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	4a38      	ldr	r2, [pc, #224]	; (8007ae4 <xTaskResumeAll+0x118>)
 8007a04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a06:	4b37      	ldr	r3, [pc, #220]	; (8007ae4 <xTaskResumeAll+0x118>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d162      	bne.n	8007ad4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a0e:	4b36      	ldr	r3, [pc, #216]	; (8007ae8 <xTaskResumeAll+0x11c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d05e      	beq.n	8007ad4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a16:	e02f      	b.n	8007a78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a18:	4b34      	ldr	r3, [pc, #208]	; (8007aec <xTaskResumeAll+0x120>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3318      	adds	r3, #24
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff f8c9 	bl	8006bbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff f8c4 	bl	8006bbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	4b2d      	ldr	r3, [pc, #180]	; (8007af0 <xTaskResumeAll+0x124>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d903      	bls.n	8007a48 <xTaskResumeAll+0x7c>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	4a2a      	ldr	r2, [pc, #168]	; (8007af0 <xTaskResumeAll+0x124>)
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4a27      	ldr	r2, [pc, #156]	; (8007af4 <xTaskResumeAll+0x128>)
 8007a56:	441a      	add	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f7ff f84f 	bl	8006b02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4b23      	ldr	r3, [pc, #140]	; (8007af8 <xTaskResumeAll+0x12c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d302      	bcc.n	8007a78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a72:	4b22      	ldr	r3, [pc, #136]	; (8007afc <xTaskResumeAll+0x130>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a78:	4b1c      	ldr	r3, [pc, #112]	; (8007aec <xTaskResumeAll+0x120>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1cb      	bne.n	8007a18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a86:	f000 fb5f 	bl	8008148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <xTaskResumeAll+0x134>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d010      	beq.n	8007ab8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a96:	f000 f847 	bl	8007b28 <xTaskIncrementTick>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007aa0:	4b16      	ldr	r3, [pc, #88]	; (8007afc <xTaskResumeAll+0x130>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f1      	bne.n	8007a96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ab2:	4b13      	ldr	r3, [pc, #76]	; (8007b00 <xTaskResumeAll+0x134>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ab8:	4b10      	ldr	r3, [pc, #64]	; (8007afc <xTaskResumeAll+0x130>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <xTaskResumeAll+0x138>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ad4:	f001 f8e6 	bl	8008ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000e88 	.word	0x20000e88
 8007ae8:	20000e60 	.word	0x20000e60
 8007aec:	20000e20 	.word	0x20000e20
 8007af0:	20000e68 	.word	0x20000e68
 8007af4:	20000990 	.word	0x20000990
 8007af8:	2000098c 	.word	0x2000098c
 8007afc:	20000e74 	.word	0x20000e74
 8007b00:	20000e70 	.word	0x20000e70
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b0e:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <xTaskGetTickCount+0x1c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b14:	687b      	ldr	r3, [r7, #4]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20000e64 	.word	0x20000e64

08007b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b32:	4b4f      	ldr	r3, [pc, #316]	; (8007c70 <xTaskIncrementTick+0x148>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 808f 	bne.w	8007c5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b3c:	4b4d      	ldr	r3, [pc, #308]	; (8007c74 <xTaskIncrementTick+0x14c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b44:	4a4b      	ldr	r2, [pc, #300]	; (8007c74 <xTaskIncrementTick+0x14c>)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d120      	bne.n	8007b92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b50:	4b49      	ldr	r3, [pc, #292]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <xTaskIncrementTick+0x46>
 8007b70:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	4b41      	ldr	r3, [pc, #260]	; (8007c7c <xTaskIncrementTick+0x154>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a3f      	ldr	r2, [pc, #252]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <xTaskIncrementTick+0x154>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	4b3e      	ldr	r3, [pc, #248]	; (8007c80 <xTaskIncrementTick+0x158>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	4a3d      	ldr	r2, [pc, #244]	; (8007c80 <xTaskIncrementTick+0x158>)
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	f000 fadb 	bl	8008148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b92:	4b3c      	ldr	r3, [pc, #240]	; (8007c84 <xTaskIncrementTick+0x15c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d349      	bcc.n	8007c30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9c:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba6:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <xTaskIncrementTick+0x15c>)
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	601a      	str	r2, [r3, #0]
					break;
 8007bae:	e03f      	b.n	8007c30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb0:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d203      	bcs.n	8007bd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bc8:	4a2e      	ldr	r2, [pc, #184]	; (8007c84 <xTaskIncrementTick+0x15c>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bce:	e02f      	b.n	8007c30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fff1 	bl	8006bbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3318      	adds	r3, #24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe ffe8 	bl	8006bbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <xTaskIncrementTick+0x160>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d903      	bls.n	8007c00 <xTaskIncrementTick+0xd8>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <xTaskIncrementTick+0x160>)
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	; (8007c8c <xTaskIncrementTick+0x164>)
 8007c0e:	441a      	add	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fe ff73 	bl	8006b02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <xTaskIncrementTick+0x168>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3b8      	bcc.n	8007b9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2e:	e7b5      	b.n	8007b9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <xTaskIncrementTick+0x168>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4915      	ldr	r1, [pc, #84]	; (8007c8c <xTaskIncrementTick+0x164>)
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d901      	bls.n	8007c4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c4c:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <xTaskIncrementTick+0x16c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e004      	b.n	8007c64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <xTaskIncrementTick+0x170>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	4a0d      	ldr	r2, [pc, #52]	; (8007c98 <xTaskIncrementTick+0x170>)
 8007c62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c64:	697b      	ldr	r3, [r7, #20]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000e88 	.word	0x20000e88
 8007c74:	20000e64 	.word	0x20000e64
 8007c78:	20000e18 	.word	0x20000e18
 8007c7c:	20000e1c 	.word	0x20000e1c
 8007c80:	20000e78 	.word	0x20000e78
 8007c84:	20000e80 	.word	0x20000e80
 8007c88:	20000e68 	.word	0x20000e68
 8007c8c:	20000990 	.word	0x20000990
 8007c90:	2000098c 	.word	0x2000098c
 8007c94:	20000e74 	.word	0x20000e74
 8007c98:	20000e70 	.word	0x20000e70

08007c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <vTaskSwitchContext+0xb0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007caa:	4b29      	ldr	r3, [pc, #164]	; (8007d50 <vTaskSwitchContext+0xb4>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb0:	e046      	b.n	8007d40 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007cb2:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <vTaskSwitchContext+0xb4>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb8:	4b26      	ldr	r3, [pc, #152]	; (8007d54 <vTaskSwitchContext+0xb8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e010      	b.n	8007ce2 <vTaskSwitchContext+0x46>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <vTaskSwitchContext+0x40>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	607b      	str	r3, [r7, #4]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <vTaskSwitchContext+0x3e>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	491d      	ldr	r1, [pc, #116]	; (8007d58 <vTaskSwitchContext+0xbc>)
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0e4      	beq.n	8007cc0 <vTaskSwitchContext+0x24>
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <vTaskSwitchContext+0xbc>)
 8007d02:	4413      	add	r3, r2
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	605a      	str	r2, [r3, #4]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	3308      	adds	r3, #8
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d104      	bne.n	8007d26 <vTaskSwitchContext+0x8a>
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	4a0b      	ldr	r2, [pc, #44]	; (8007d5c <vTaskSwitchContext+0xc0>)
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	4a08      	ldr	r2, [pc, #32]	; (8007d54 <vTaskSwitchContext+0xb8>)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <vTaskSwitchContext+0xc0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3354      	adds	r3, #84	; 0x54
 8007d3c:	4a08      	ldr	r2, [pc, #32]	; (8007d60 <vTaskSwitchContext+0xc4>)
 8007d3e:	6013      	str	r3, [r2, #0]
}
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	20000e88 	.word	0x20000e88
 8007d50:	20000e74 	.word	0x20000e74
 8007d54:	20000e68 	.word	0x20000e68
 8007d58:	20000990 	.word	0x20000990
 8007d5c:	2000098c 	.word	0x2000098c
 8007d60:	20000010 	.word	0x20000010

08007d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <vTaskPlaceOnEventList+0x44>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3318      	adds	r3, #24
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fe fed9 	bl	8006b4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d98:	2101      	movs	r1, #1
 8007d9a:	6838      	ldr	r0, [r7, #0]
 8007d9c:	f000 fa80 	bl	80082a0 <prvAddCurrentTaskToDelayedList>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	2000098c 	.word	0x2000098c

08007dac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	617b      	str	r3, [r7, #20]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3318      	adds	r3, #24
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7fe fe90 	bl	8006b02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68b8      	ldr	r0, [r7, #8]
 8007df2:	f000 fa55 	bl	80082a0 <prvAddCurrentTaskToDelayedList>
	}
 8007df6:	bf00      	nop
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	2000098c 	.word	0x2000098c

08007e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60fb      	str	r3, [r7, #12]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	3318      	adds	r3, #24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fec1 	bl	8006bbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e3a:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <xTaskRemoveFromEventList+0xb0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11d      	bne.n	8007e7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe feb8 	bl	8006bbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <xTaskRemoveFromEventList+0xb4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d903      	bls.n	8007e60 <xTaskRemoveFromEventList+0x5c>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <xTaskRemoveFromEventList+0xb4>)
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4a13      	ldr	r2, [pc, #76]	; (8007ebc <xTaskRemoveFromEventList+0xb8>)
 8007e6e:	441a      	add	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f7fe fe43 	bl	8006b02 <vListInsertEnd>
 8007e7c:	e005      	b.n	8007e8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3318      	adds	r3, #24
 8007e82:	4619      	mov	r1, r3
 8007e84:	480e      	ldr	r0, [pc, #56]	; (8007ec0 <xTaskRemoveFromEventList+0xbc>)
 8007e86:	f7fe fe3c 	bl	8006b02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <xTaskRemoveFromEventList+0xc0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d905      	bls.n	8007ea4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <xTaskRemoveFromEventList+0xc4>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e001      	b.n	8007ea8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ea8:	697b      	ldr	r3, [r7, #20]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000e88 	.word	0x20000e88
 8007eb8:	20000e68 	.word	0x20000e68
 8007ebc:	20000990 	.word	0x20000990
 8007ec0:	20000e20 	.word	0x20000e20
 8007ec4:	2000098c 	.word	0x2000098c
 8007ec8:	20000e74 	.word	0x20000e74

08007ecc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <vTaskInternalSetTimeOutState+0x24>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <vTaskInternalSetTimeOutState+0x28>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	605a      	str	r2, [r3, #4]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20000e78 	.word	0x20000e78
 8007ef4:	20000e64 	.word	0x20000e64

08007ef8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	613b      	str	r3, [r7, #16]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	60fb      	str	r3, [r7, #12]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f3a:	f000 fe83 	bl	8008c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f3e:	4b1d      	ldr	r3, [pc, #116]	; (8007fb4 <xTaskCheckForTimeOut+0xbc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d102      	bne.n	8007f5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	e023      	b.n	8007fa6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <xTaskCheckForTimeOut+0xc0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d007      	beq.n	8007f7a <xTaskCheckForTimeOut+0x82>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d302      	bcc.n	8007f7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	e015      	b.n	8007fa6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d20b      	bcs.n	8007f9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	1ad2      	subs	r2, r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff ff9b 	bl	8007ecc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61fb      	str	r3, [r7, #28]
 8007f9a:	e004      	b.n	8007fa6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fa6:	f000 fe7d 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 8007faa:	69fb      	ldr	r3, [r7, #28]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000e64 	.word	0x20000e64
 8007fb8:	20000e78 	.word	0x20000e78

08007fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fc0:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <vTaskMissedYield+0x14>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20000e74 	.word	0x20000e74

08007fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fdc:	f000 f852 	bl	8008084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <prvIdleTask+0x28>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d9f9      	bls.n	8007fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <prvIdleTask+0x2c>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ff8:	e7f0      	b.n	8007fdc <prvIdleTask+0x8>
 8007ffa:	bf00      	nop
 8007ffc:	20000990 	.word	0x20000990
 8008000:	e000ed04 	.word	0xe000ed04

08008004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800800a:	2300      	movs	r3, #0
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	e00c      	b.n	800802a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4a12      	ldr	r2, [pc, #72]	; (8008064 <prvInitialiseTaskLists+0x60>)
 800801c:	4413      	add	r3, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe fd42 	bl	8006aa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3301      	adds	r3, #1
 8008028:	607b      	str	r3, [r7, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b37      	cmp	r3, #55	; 0x37
 800802e:	d9ef      	bls.n	8008010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008030:	480d      	ldr	r0, [pc, #52]	; (8008068 <prvInitialiseTaskLists+0x64>)
 8008032:	f7fe fd39 	bl	8006aa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008036:	480d      	ldr	r0, [pc, #52]	; (800806c <prvInitialiseTaskLists+0x68>)
 8008038:	f7fe fd36 	bl	8006aa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800803c:	480c      	ldr	r0, [pc, #48]	; (8008070 <prvInitialiseTaskLists+0x6c>)
 800803e:	f7fe fd33 	bl	8006aa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008042:	480c      	ldr	r0, [pc, #48]	; (8008074 <prvInitialiseTaskLists+0x70>)
 8008044:	f7fe fd30 	bl	8006aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008048:	480b      	ldr	r0, [pc, #44]	; (8008078 <prvInitialiseTaskLists+0x74>)
 800804a:	f7fe fd2d 	bl	8006aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800804e:	4b0b      	ldr	r3, [pc, #44]	; (800807c <prvInitialiseTaskLists+0x78>)
 8008050:	4a05      	ldr	r2, [pc, #20]	; (8008068 <prvInitialiseTaskLists+0x64>)
 8008052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <prvInitialiseTaskLists+0x7c>)
 8008056:	4a05      	ldr	r2, [pc, #20]	; (800806c <prvInitialiseTaskLists+0x68>)
 8008058:	601a      	str	r2, [r3, #0]
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000990 	.word	0x20000990
 8008068:	20000df0 	.word	0x20000df0
 800806c:	20000e04 	.word	0x20000e04
 8008070:	20000e20 	.word	0x20000e20
 8008074:	20000e34 	.word	0x20000e34
 8008078:	20000e4c 	.word	0x20000e4c
 800807c:	20000e18 	.word	0x20000e18
 8008080:	20000e1c 	.word	0x20000e1c

08008084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800808a:	e019      	b.n	80080c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800808c:	f000 fdda 	bl	8008c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008090:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <prvCheckTasksWaitingTermination+0x50>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3304      	adds	r3, #4
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fd8d 	bl	8006bbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080a2:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <prvCheckTasksWaitingTermination+0x54>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4a0b      	ldr	r2, [pc, #44]	; (80080d8 <prvCheckTasksWaitingTermination+0x54>)
 80080aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080ac:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <prvCheckTasksWaitingTermination+0x58>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <prvCheckTasksWaitingTermination+0x58>)
 80080b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080b6:	f000 fdf5 	bl	8008ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f810 	bl	80080e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <prvCheckTasksWaitingTermination+0x58>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e1      	bne.n	800808c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000e34 	.word	0x20000e34
 80080d8:	20000e60 	.word	0x20000e60
 80080dc:	20000e48 	.word	0x20000e48

080080e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3354      	adds	r3, #84	; 0x54
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 f9e1 	bl	80094b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d108      	bne.n	800810e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fec1 	bl	8008e88 <vPortFree>
				vPortFree( pxTCB );
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 febe 	bl	8008e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800810c:	e018      	b.n	8008140 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008114:	2b01      	cmp	r3, #1
 8008116:	d103      	bne.n	8008120 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 feb5 	bl	8008e88 <vPortFree>
	}
 800811e:	e00f      	b.n	8008140 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008126:	2b02      	cmp	r3, #2
 8008128:	d00a      	beq.n	8008140 <prvDeleteTCB+0x60>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	60fb      	str	r3, [r7, #12]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <prvDeleteTCB+0x5e>
	}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <prvResetNextTaskUnblockTime+0x38>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <prvResetNextTaskUnblockTime+0x3c>)
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008160:	e008      	b.n	8008174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <prvResetNextTaskUnblockTime+0x38>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4a04      	ldr	r2, [pc, #16]	; (8008184 <prvResetNextTaskUnblockTime+0x3c>)
 8008172:	6013      	str	r3, [r2, #0]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	20000e18 	.word	0x20000e18
 8008184:	20000e80 	.word	0x20000e80

08008188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <xTaskGetSchedulerState+0x34>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008196:	2301      	movs	r3, #1
 8008198:	607b      	str	r3, [r7, #4]
 800819a:	e008      	b.n	80081ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800819c:	4b08      	ldr	r3, [pc, #32]	; (80081c0 <xTaskGetSchedulerState+0x38>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081a4:	2302      	movs	r3, #2
 80081a6:	607b      	str	r3, [r7, #4]
 80081a8:	e001      	b.n	80081ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ae:	687b      	ldr	r3, [r7, #4]
	}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000e6c 	.word	0x20000e6c
 80081c0:	20000e88 	.word	0x20000e88

080081c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d056      	beq.n	8008288 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081da:	4b2e      	ldr	r3, [pc, #184]	; (8008294 <xTaskPriorityDisinherit+0xd0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d00a      	beq.n	80081fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	60fb      	str	r3, [r7, #12]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800822a:	429a      	cmp	r2, r3
 800822c:	d02c      	beq.n	8008288 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008232:	2b00      	cmp	r3, #0
 8008234:	d128      	bne.n	8008288 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fcbe 	bl	8006bbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <xTaskPriorityDisinherit+0xd4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d903      	bls.n	8008268 <xTaskPriorityDisinherit+0xa4>
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <xTaskPriorityDisinherit+0xd4>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4a09      	ldr	r2, [pc, #36]	; (800829c <xTaskPriorityDisinherit+0xd8>)
 8008276:	441a      	add	r2, r3
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fc3f 	bl	8006b02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008288:	697b      	ldr	r3, [r7, #20]
	}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	2000098c 	.word	0x2000098c
 8008298:	20000e68 	.word	0x20000e68
 800829c:	20000990 	.word	0x20000990

080082a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082aa:	4b21      	ldr	r3, [pc, #132]	; (8008330 <prvAddCurrentTaskToDelayedList+0x90>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082b0:	4b20      	ldr	r3, [pc, #128]	; (8008334 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3304      	adds	r3, #4
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fc80 	bl	8006bbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c2:	d10a      	bne.n	80082da <prvAddCurrentTaskToDelayedList+0x3a>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ca:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <prvAddCurrentTaskToDelayedList+0x94>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4819      	ldr	r0, [pc, #100]	; (8008338 <prvAddCurrentTaskToDelayedList+0x98>)
 80082d4:	f7fe fc15 	bl	8006b02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082d8:	e026      	b.n	8008328 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4413      	add	r3, r2
 80082e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d209      	bcs.n	8008306 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <prvAddCurrentTaskToDelayedList+0x9c>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4b0f      	ldr	r3, [pc, #60]	; (8008334 <prvAddCurrentTaskToDelayedList+0x94>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f7fe fc23 	bl	8006b4a <vListInsert>
}
 8008304:	e010      	b.n	8008328 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008306:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <prvAddCurrentTaskToDelayedList+0x94>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f7fe fc19 	bl	8006b4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008318:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <prvAddCurrentTaskToDelayedList+0xa4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	429a      	cmp	r2, r3
 8008320:	d202      	bcs.n	8008328 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008322:	4a08      	ldr	r2, [pc, #32]	; (8008344 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6013      	str	r3, [r2, #0]
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000e64 	.word	0x20000e64
 8008334:	2000098c 	.word	0x2000098c
 8008338:	20000e4c 	.word	0x20000e4c
 800833c:	20000e1c 	.word	0x20000e1c
 8008340:	20000e18 	.word	0x20000e18
 8008344:	20000e80 	.word	0x20000e80

08008348 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008352:	f000 fb07 	bl	8008964 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008356:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <xTimerCreateTimerTask+0x80>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d021      	beq.n	80083a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008366:	1d3a      	adds	r2, r7, #4
 8008368:	f107 0108 	add.w	r1, r7, #8
 800836c:	f107 030c 	add.w	r3, r7, #12
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fb7f 	bl	8006a74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	9202      	str	r2, [sp, #8]
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	2302      	movs	r3, #2
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	2300      	movs	r3, #0
 8008386:	460a      	mov	r2, r1
 8008388:	4910      	ldr	r1, [pc, #64]	; (80083cc <xTimerCreateTimerTask+0x84>)
 800838a:	4811      	ldr	r0, [pc, #68]	; (80083d0 <xTimerCreateTimerTask+0x88>)
 800838c:	f7ff f92c 	bl	80075e8 <xTaskCreateStatic>
 8008390:	4603      	mov	r3, r0
 8008392:	4a10      	ldr	r2, [pc, #64]	; (80083d4 <xTimerCreateTimerTask+0x8c>)
 8008394:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008396:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <xTimerCreateTimerTask+0x8c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800839e:	2301      	movs	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	613b      	str	r3, [r7, #16]
}
 80083ba:	bf00      	nop
 80083bc:	e7fe      	b.n	80083bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083be:	697b      	ldr	r3, [r7, #20]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20000ebc 	.word	0x20000ebc
 80083cc:	0800964c 	.word	0x0800964c
 80083d0:	0800850d 	.word	0x0800850d
 80083d4:	20000ec0 	.word	0x20000ec0

080083d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	623b      	str	r3, [r7, #32]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008406:	4b1a      	ldr	r3, [pc, #104]	; (8008470 <xTimerGenericCommand+0x98>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d02a      	beq.n	8008464 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b05      	cmp	r3, #5
 800841e:	dc18      	bgt.n	8008452 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008420:	f7ff feb2 	bl	8008188 <xTaskGetSchedulerState>
 8008424:	4603      	mov	r3, r0
 8008426:	2b02      	cmp	r3, #2
 8008428:	d109      	bne.n	800843e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800842a:	4b11      	ldr	r3, [pc, #68]	; (8008470 <xTimerGenericCommand+0x98>)
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f107 0110 	add.w	r1, r7, #16
 8008432:	2300      	movs	r3, #0
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	f7fe fcef 	bl	8006e18 <xQueueGenericSend>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24
 800843c:	e012      	b.n	8008464 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800843e:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <xTimerGenericCommand+0x98>)
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	f107 0110 	add.w	r1, r7, #16
 8008446:	2300      	movs	r3, #0
 8008448:	2200      	movs	r2, #0
 800844a:	f7fe fce5 	bl	8006e18 <xQueueGenericSend>
 800844e:	6278      	str	r0, [r7, #36]	; 0x24
 8008450:	e008      	b.n	8008464 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008452:	4b07      	ldr	r3, [pc, #28]	; (8008470 <xTimerGenericCommand+0x98>)
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f107 0110 	add.w	r1, r7, #16
 800845a:	2300      	movs	r3, #0
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	f7fe fdd9 	bl	8007014 <xQueueGenericSendFromISR>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008466:	4618      	mov	r0, r3
 8008468:	3728      	adds	r7, #40	; 0x28
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000ebc 	.word	0x20000ebc

08008474 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af02      	add	r7, sp, #8
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800847e:	4b22      	ldr	r3, [pc, #136]	; (8008508 <prvProcessExpiredTimer+0x94>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	3304      	adds	r3, #4
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fb95 	bl	8006bbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d022      	beq.n	80084e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	699a      	ldr	r2, [r3, #24]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	18d1      	adds	r1, r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	6978      	ldr	r0, [r7, #20]
 80084ae:	f000 f8d1 	bl	8008654 <prvInsertTimerInActiveList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01f      	beq.n	80084f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084b8:	2300      	movs	r3, #0
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2300      	movs	r3, #0
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	2100      	movs	r1, #0
 80084c2:	6978      	ldr	r0, [r7, #20]
 80084c4:	f7ff ff88 	bl	80083d8 <xTimerGenericCommand>
 80084c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d113      	bne.n	80084f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	60fb      	str	r3, [r7, #12]
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ec:	f023 0301 	bic.w	r3, r3, #1
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	6978      	ldr	r0, [r7, #20]
 80084fe:	4798      	blx	r3
}
 8008500:	bf00      	nop
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000eb4 	.word	0x20000eb4

0800850c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f857 	bl	80085cc <prvGetNextExpireTime>
 800851e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4619      	mov	r1, r3
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f803 	bl	8008530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800852a:	f000 f8d5 	bl	80086d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800852e:	e7f1      	b.n	8008514 <prvTimerTask+0x8>

08008530 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800853a:	f7ff fa39 	bl	80079b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800853e:	f107 0308 	add.w	r3, r7, #8
 8008542:	4618      	mov	r0, r3
 8008544:	f000 f866 	bl	8008614 <prvSampleTimeNow>
 8008548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d130      	bne.n	80085b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <prvProcessTimerOrBlockTask+0x3c>
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	429a      	cmp	r2, r3
 800855c:	d806      	bhi.n	800856c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800855e:	f7ff fa35 	bl	80079cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008562:	68f9      	ldr	r1, [r7, #12]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff ff85 	bl	8008474 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800856a:	e024      	b.n	80085b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d008      	beq.n	8008584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008572:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <prvProcessTimerOrBlockTask+0x90>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <prvProcessTimerOrBlockTask+0x50>
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <prvProcessTimerOrBlockTask+0x52>
 8008580:	2300      	movs	r3, #0
 8008582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008584:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <prvProcessTimerOrBlockTask+0x94>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	f7fe fff5 	bl	8007580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008596:	f7ff fa19 	bl	80079cc <xTaskResumeAll>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <prvProcessTimerOrBlockTask+0x98>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
}
 80085b0:	e001      	b.n	80085b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085b2:	f7ff fa0b 	bl	80079cc <xTaskResumeAll>
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000eb8 	.word	0x20000eb8
 80085c4:	20000ebc 	.word	0x20000ebc
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085d4:	4b0e      	ldr	r3, [pc, #56]	; (8008610 <prvGetNextExpireTime+0x44>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <prvGetNextExpireTime+0x16>
 80085de:	2201      	movs	r2, #1
 80085e0:	e000      	b.n	80085e4 <prvGetNextExpireTime+0x18>
 80085e2:	2200      	movs	r2, #0
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d105      	bne.n	80085fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <prvGetNextExpireTime+0x44>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	e001      	b.n	8008600 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008600:	68fb      	ldr	r3, [r7, #12]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20000eb4 	.word	0x20000eb4

08008614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800861c:	f7ff fa74 	bl	8007b08 <xTaskGetTickCount>
 8008620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008622:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <prvSampleTimeNow+0x3c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	429a      	cmp	r2, r3
 800862a:	d205      	bcs.n	8008638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800862c:	f000 f936 	bl	800889c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	e002      	b.n	800863e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800863e:	4a04      	ldr	r2, [pc, #16]	; (8008650 <prvSampleTimeNow+0x3c>)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008644:	68fb      	ldr	r3, [r7, #12]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000ec4 	.word	0x20000ec4

08008654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	429a      	cmp	r2, r3
 8008678:	d812      	bhi.n	80086a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	429a      	cmp	r2, r3
 8008686:	d302      	bcc.n	800868e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008688:	2301      	movs	r3, #1
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	e01b      	b.n	80086c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800868e:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <prvInsertTimerInActiveList+0x7c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3304      	adds	r3, #4
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f7fe fa56 	bl	8006b4a <vListInsert>
 800869e:	e012      	b.n	80086c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d206      	bcs.n	80086b6 <prvInsertTimerInActiveList+0x62>
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d302      	bcc.n	80086b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e007      	b.n	80086c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <prvInsertTimerInActiveList+0x80>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fe fa42 	bl	8006b4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086c6:	697b      	ldr	r3, [r7, #20]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000eb8 	.word	0x20000eb8
 80086d4:	20000eb4 	.word	0x20000eb4

080086d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08e      	sub	sp, #56	; 0x38
 80086dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086de:	e0ca      	b.n	8008876 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da18      	bge.n	8008718 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086e6:	1d3b      	adds	r3, r7, #4
 80086e8:	3304      	adds	r3, #4
 80086ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	61fb      	str	r3, [r7, #28]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800870e:	6850      	ldr	r0, [r2, #4]
 8008710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008712:	6892      	ldr	r2, [r2, #8]
 8008714:	4611      	mov	r1, r2
 8008716:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f2c0 80aa 	blt.w	8008874 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	3304      	adds	r3, #4
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe fa43 	bl	8006bbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008736:	463b      	mov	r3, r7
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff ff6b 	bl	8008614 <prvSampleTimeNow>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b09      	cmp	r3, #9
 8008744:	f200 8097 	bhi.w	8008876 <prvProcessReceivedCommands+0x19e>
 8008748:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <prvProcessReceivedCommands+0x78>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	08008779 	.word	0x08008779
 8008754:	08008779 	.word	0x08008779
 8008758:	08008779 	.word	0x08008779
 800875c:	080087ed 	.word	0x080087ed
 8008760:	08008801 	.word	0x08008801
 8008764:	0800884b 	.word	0x0800884b
 8008768:	08008779 	.word	0x08008779
 800876c:	08008779 	.word	0x08008779
 8008770:	080087ed 	.word	0x080087ed
 8008774:	08008801 	.word	0x08008801
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	b2da      	uxtb	r2, r3
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	18d1      	adds	r1, r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008798:	f7ff ff5c 	bl	8008654 <prvInsertTimerInActiveList>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d069      	beq.n	8008876 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d05e      	beq.n	8008876 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	441a      	add	r2, r3
 80087c0:	2300      	movs	r3, #0
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	2300      	movs	r3, #0
 80087c6:	2100      	movs	r1, #0
 80087c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ca:	f7ff fe05 	bl	80083d8 <xTimerGenericCommand>
 80087ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d14f      	bne.n	8008876 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	61bb      	str	r3, [r7, #24]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087fe:	e03a      	b.n	8008876 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	b2da      	uxtb	r2, r3
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	617b      	str	r3, [r7, #20]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	699a      	ldr	r2, [r3, #24]
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	18d1      	adds	r1, r2, r3
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008844:	f7ff ff06 	bl	8008654 <prvInsertTimerInActiveList>
					break;
 8008848:	e015      	b.n	8008876 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d103      	bne.n	8008860 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800885a:	f000 fb15 	bl	8008e88 <vPortFree>
 800885e:	e00a      	b.n	8008876 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008866:	f023 0301 	bic.w	r3, r3, #1
 800886a:	b2da      	uxtb	r2, r3
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008872:	e000      	b.n	8008876 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008876:	4b08      	ldr	r3, [pc, #32]	; (8008898 <prvProcessReceivedCommands+0x1c0>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	1d39      	adds	r1, r7, #4
 800887c:	2200      	movs	r2, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fc64 	bl	800714c <xQueueReceive>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	f47f af2a 	bne.w	80086e0 <prvProcessReceivedCommands+0x8>
	}
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	3730      	adds	r7, #48	; 0x30
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000ebc 	.word	0x20000ebc

0800889c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088a2:	e048      	b.n	8008936 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088a4:	4b2d      	ldr	r3, [pc, #180]	; (800895c <prvSwitchTimerLists+0xc0>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ae:	4b2b      	ldr	r3, [pc, #172]	; (800895c <prvSwitchTimerLists+0xc0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe f97d 	bl	8006bbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d02e      	beq.n	8008936 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4413      	add	r3, r2
 80088e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d90e      	bls.n	8008908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088f6:	4b19      	ldr	r3, [pc, #100]	; (800895c <prvSwitchTimerLists+0xc0>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f7fe f922 	bl	8006b4a <vListInsert>
 8008906:	e016      	b.n	8008936 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008908:	2300      	movs	r3, #0
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2300      	movs	r3, #0
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	2100      	movs	r1, #0
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fd60 	bl	80083d8 <xTimerGenericCommand>
 8008918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	603b      	str	r3, [r7, #0]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008936:	4b09      	ldr	r3, [pc, #36]	; (800895c <prvSwitchTimerLists+0xc0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1b1      	bne.n	80088a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <prvSwitchTimerLists+0xc0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008946:	4b06      	ldr	r3, [pc, #24]	; (8008960 <prvSwitchTimerLists+0xc4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a04      	ldr	r2, [pc, #16]	; (800895c <prvSwitchTimerLists+0xc0>)
 800894c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800894e:	4a04      	ldr	r2, [pc, #16]	; (8008960 <prvSwitchTimerLists+0xc4>)
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	6013      	str	r3, [r2, #0]
}
 8008954:	bf00      	nop
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20000eb4 	.word	0x20000eb4
 8008960:	20000eb8 	.word	0x20000eb8

08008964 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800896a:	f000 f96b 	bl	8008c44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800896e:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <prvCheckForValidListAndQueue+0x60>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d120      	bne.n	80089b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008976:	4814      	ldr	r0, [pc, #80]	; (80089c8 <prvCheckForValidListAndQueue+0x64>)
 8008978:	f7fe f896 	bl	8006aa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800897c:	4813      	ldr	r0, [pc, #76]	; (80089cc <prvCheckForValidListAndQueue+0x68>)
 800897e:	f7fe f893 	bl	8006aa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008982:	4b13      	ldr	r3, [pc, #76]	; (80089d0 <prvCheckForValidListAndQueue+0x6c>)
 8008984:	4a10      	ldr	r2, [pc, #64]	; (80089c8 <prvCheckForValidListAndQueue+0x64>)
 8008986:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008988:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <prvCheckForValidListAndQueue+0x70>)
 800898a:	4a10      	ldr	r2, [pc, #64]	; (80089cc <prvCheckForValidListAndQueue+0x68>)
 800898c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800898e:	2300      	movs	r3, #0
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <prvCheckForValidListAndQueue+0x74>)
 8008994:	4a11      	ldr	r2, [pc, #68]	; (80089dc <prvCheckForValidListAndQueue+0x78>)
 8008996:	2110      	movs	r1, #16
 8008998:	200a      	movs	r0, #10
 800899a:	f7fe f9a1 	bl	8006ce0 <xQueueGenericCreateStatic>
 800899e:	4603      	mov	r3, r0
 80089a0:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <prvCheckForValidListAndQueue+0x60>)
 80089a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <prvCheckForValidListAndQueue+0x60>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <prvCheckForValidListAndQueue+0x60>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	490b      	ldr	r1, [pc, #44]	; (80089e0 <prvCheckForValidListAndQueue+0x7c>)
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fdba 	bl	800752c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089b8:	f000 f974 	bl	8008ca4 <vPortExitCritical>
}
 80089bc:	bf00      	nop
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000ebc 	.word	0x20000ebc
 80089c8:	20000e8c 	.word	0x20000e8c
 80089cc:	20000ea0 	.word	0x20000ea0
 80089d0:	20000eb4 	.word	0x20000eb4
 80089d4:	20000eb8 	.word	0x20000eb8
 80089d8:	20000f68 	.word	0x20000f68
 80089dc:	20000ec8 	.word	0x20000ec8
 80089e0:	08009654 	.word	0x08009654

080089e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3b04      	subs	r3, #4
 80089f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3b04      	subs	r3, #4
 8008a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f023 0201 	bic.w	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3b04      	subs	r3, #4
 8008a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a14:	4a0c      	ldr	r2, [pc, #48]	; (8008a48 <pxPortInitialiseStack+0x64>)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3b14      	subs	r3, #20
 8008a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b04      	subs	r3, #4
 8008a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f06f 0202 	mvn.w	r2, #2
 8008a32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3b20      	subs	r3, #32
 8008a38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	08008a4d 	.word	0x08008a4d

08008a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a56:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <prvTaskExitError+0x54>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d00a      	beq.n	8008a76 <prvTaskExitError+0x2a>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60fb      	str	r3, [r7, #12]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <prvTaskExitError+0x28>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60bb      	str	r3, [r7, #8]
}
 8008a88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a8a:	bf00      	nop
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0fc      	beq.n	8008a8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	2000000c 	.word	0x2000000c
	...

08008ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <pxCurrentTCBConst2>)
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	6808      	ldr	r0, [r1, #0]
 8008ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	f380 8809 	msr	PSP, r0
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f380 8811 	msr	BASEPRI, r0
 8008aca:	4770      	bx	lr
 8008acc:	f3af 8000 	nop.w

08008ad0 <pxCurrentTCBConst2>:
 8008ad0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop

08008ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ad8:	4808      	ldr	r0, [pc, #32]	; (8008afc <prvPortStartFirstTask+0x24>)
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	6800      	ldr	r0, [r0, #0]
 8008ade:	f380 8808 	msr	MSP, r0
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8814 	msr	CONTROL, r0
 8008aea:	b662      	cpsie	i
 8008aec:	b661      	cpsie	f
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	df00      	svc	0
 8008af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008afa:	bf00      	nop
 8008afc:	e000ed08 	.word	0xe000ed08

08008b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b06:	4b46      	ldr	r3, [pc, #280]	; (8008c20 <xPortStartScheduler+0x120>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a46      	ldr	r2, [pc, #280]	; (8008c24 <xPortStartScheduler+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10a      	bne.n	8008b26 <xPortStartScheduler+0x26>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	613b      	str	r3, [r7, #16]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b26:	4b3e      	ldr	r3, [pc, #248]	; (8008c20 <xPortStartScheduler+0x120>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a3f      	ldr	r2, [pc, #252]	; (8008c28 <xPortStartScheduler+0x128>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10a      	bne.n	8008b46 <xPortStartScheduler+0x46>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b46:	4b39      	ldr	r3, [pc, #228]	; (8008c2c <xPortStartScheduler+0x12c>)
 8008b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	22ff      	movs	r2, #255	; 0xff
 8008b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b31      	ldr	r3, [pc, #196]	; (8008c30 <xPortStartScheduler+0x130>)
 8008b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b6e:	4b31      	ldr	r3, [pc, #196]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b70:	2207      	movs	r2, #7
 8008b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b74:	e009      	b.n	8008b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b76:	4b2f      	ldr	r3, [pc, #188]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	4a2d      	ldr	r2, [pc, #180]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b80      	cmp	r3, #128	; 0x80
 8008b94:	d0ef      	beq.n	8008b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b96:	4b27      	ldr	r3, [pc, #156]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f1c3 0307 	rsb	r3, r3, #7
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d00a      	beq.n	8008bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60bb      	str	r3, [r7, #8]
}
 8008bb4:	bf00      	nop
 8008bb6:	e7fe      	b.n	8008bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bb8:	4b1e      	ldr	r3, [pc, #120]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	4a1d      	ldr	r2, [pc, #116]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bc2:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bca:	4a1a      	ldr	r2, [pc, #104]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bd6:	4b18      	ldr	r3, [pc, #96]	; (8008c38 <xPortStartScheduler+0x138>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <xPortStartScheduler+0x138>)
 8008bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008be2:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <xPortStartScheduler+0x138>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a14      	ldr	r2, [pc, #80]	; (8008c38 <xPortStartScheduler+0x138>)
 8008be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bee:	f000 f8dd 	bl	8008dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bf2:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <xPortStartScheduler+0x13c>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bf8:	f000 f8fc 	bl	8008df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bfc:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <xPortStartScheduler+0x140>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0f      	ldr	r2, [pc, #60]	; (8008c40 <xPortStartScheduler+0x140>)
 8008c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c08:	f7ff ff66 	bl	8008ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c0c:	f7ff f846 	bl	8007c9c <vTaskSwitchContext>
	prvTaskExitError();
 8008c10:	f7ff ff1c 	bl	8008a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	e000ed00 	.word	0xe000ed00
 8008c24:	410fc271 	.word	0x410fc271
 8008c28:	410fc270 	.word	0x410fc270
 8008c2c:	e000e400 	.word	0xe000e400
 8008c30:	20000fb8 	.word	0x20000fb8
 8008c34:	20000fbc 	.word	0x20000fbc
 8008c38:	e000ed20 	.word	0xe000ed20
 8008c3c:	2000000c 	.word	0x2000000c
 8008c40:	e000ef34 	.word	0xe000ef34

08008c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	607b      	str	r3, [r7, #4]
}
 8008c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	4a0d      	ldr	r2, [pc, #52]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10f      	bne.n	8008c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <vPortEnterCritical+0x5c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	603b      	str	r3, [r7, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <vPortEnterCritical+0x4a>
	}
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	2000000c 	.word	0x2000000c
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008caa:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <vPortExitCritical+0x24>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	607b      	str	r3, [r7, #4]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	4a09      	ldr	r2, [pc, #36]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cd2:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <vPortExitCritical+0x42>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	f383 8811 	msr	BASEPRI, r3
}
 8008ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	2000000c 	.word	0x2000000c
	...

08008d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d00:	f3ef 8009 	mrs	r0, PSP
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <pxCurrentTCBConst>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	f01e 0f10 	tst.w	lr, #16
 8008d10:	bf08      	it	eq
 8008d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	6010      	str	r0, [r2, #0]
 8008d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d24:	f380 8811 	msr	BASEPRI, r0
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f7fe ffb4 	bl	8007c9c <vTaskSwitchContext>
 8008d34:	f04f 0000 	mov.w	r0, #0
 8008d38:	f380 8811 	msr	BASEPRI, r0
 8008d3c:	bc09      	pop	{r0, r3}
 8008d3e:	6819      	ldr	r1, [r3, #0]
 8008d40:	6808      	ldr	r0, [r1, #0]
 8008d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d46:	f01e 0f10 	tst.w	lr, #16
 8008d4a:	bf08      	it	eq
 8008d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d50:	f380 8809 	msr	PSP, r0
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	f3af 8000 	nop.w

08008d60 <pxCurrentTCBConst>:
 8008d60:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop

08008d68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	607b      	str	r3, [r7, #4]
}
 8008d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d82:	f7fe fed1 	bl	8007b28 <xTaskIncrementTick>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d8c:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <xPortSysTickHandler+0x40>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f383 8811 	msr	BASEPRI, r3
}
 8008d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008db6:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <vPortSetupTimerInterrupt+0x38>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <vPortSetupTimerInterrupt+0x3c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <vPortSetupTimerInterrupt+0x40>)
 8008dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc6:	099b      	lsrs	r3, r3, #6
 8008dc8:	4a09      	ldr	r2, [pc, #36]	; (8008df0 <vPortSetupTimerInterrupt+0x44>)
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dce:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008dd0:	2207      	movs	r2, #7
 8008dd2:	601a      	str	r2, [r3, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	e000e010 	.word	0xe000e010
 8008de4:	e000e018 	.word	0xe000e018
 8008de8:	20000000 	.word	0x20000000
 8008dec:	10624dd3 	.word	0x10624dd3
 8008df0:	e000e014 	.word	0xe000e014

08008df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e04 <vPortEnableVFP+0x10>
 8008df8:	6801      	ldr	r1, [r0, #0]
 8008dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dfe:	6001      	str	r1, [r0, #0]
 8008e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e02:	bf00      	nop
 8008e04:	e000ed88 	.word	0xe000ed88

08008e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e0e:	f3ef 8305 	mrs	r3, IPSR
 8008e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b0f      	cmp	r3, #15
 8008e18:	d914      	bls.n	8008e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <vPortValidateInterruptPriority+0x70>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e24:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <vPortValidateInterruptPriority+0x74>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	7afa      	ldrb	r2, [r7, #11]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d20a      	bcs.n	8008e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	607b      	str	r3, [r7, #4]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <vPortValidateInterruptPriority+0x78>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e4c:	4b0d      	ldr	r3, [pc, #52]	; (8008e84 <vPortValidateInterruptPriority+0x7c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d90a      	bls.n	8008e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	603b      	str	r3, [r7, #0]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <vPortValidateInterruptPriority+0x60>
	}
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	e000e3f0 	.word	0xe000e3f0
 8008e7c:	20000fb8 	.word	0x20000fb8
 8008e80:	e000ed0c 	.word	0xe000ed0c
 8008e84:	20000fbc 	.word	0x20000fbc

08008e88 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d04d      	beq.n	8008f36 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <vPortFree+0xb8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <vPortFree+0x44>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60fb      	str	r3, [r7, #12]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <vPortFree+0x62>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	60bb      	str	r3, [r7, #8]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <vPortFree+0xb8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01e      	beq.n	8008f36 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11a      	bne.n	8008f36 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <vPortFree+0xb8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	401a      	ands	r2, r3
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f10:	f7fe fd4e 	bl	80079b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <vPortFree+0xbc>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	4a09      	ldr	r2, [pc, #36]	; (8008f44 <vPortFree+0xbc>)
 8008f20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f22:	6938      	ldr	r0, [r7, #16]
 8008f24:	f000 f812 	bl	8008f4c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <vPortFree+0xc0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	4a06      	ldr	r2, [pc, #24]	; (8008f48 <vPortFree+0xc0>)
 8008f30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f32:	f7fe fd4b 	bl	80079cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f36:	bf00      	nop
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000fd4 	.word	0x20000fd4
 8008f44:	20000fcc 	.word	0x20000fcc
 8008f48:	20000fd0 	.word	0x20000fd0

08008f4c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f54:	4b28      	ldr	r3, [pc, #160]	; (8008ff8 <prvInsertBlockIntoFreeList+0xac>)
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	e002      	b.n	8008f60 <prvInsertBlockIntoFreeList+0x14>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d8f7      	bhi.n	8008f5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d108      	bne.n	8008f8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	441a      	add	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	441a      	add	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d118      	bne.n	8008fd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4b15      	ldr	r3, [pc, #84]	; (8008ffc <prvInsertBlockIntoFreeList+0xb0>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d00d      	beq.n	8008fca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	441a      	add	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e008      	b.n	8008fdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fca:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <prvInsertBlockIntoFreeList+0xb0>)
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	e003      	b.n	8008fdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d002      	beq.n	8008fea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fea:	bf00      	nop
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	20000fc0 	.word	0x20000fc0
 8008ffc:	20000fc8 	.word	0x20000fc8

08009000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f7fc fb27 	bl	800566a <USBD_LL_SetupStage>
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	4613      	mov	r3, r2
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	4619      	mov	r1, r3
 800904e:	f7fc fb61 	bl	8005714 <USBD_LL_DataOutStage>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800906c:	78fa      	ldrb	r2, [r7, #3]
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	4613      	mov	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	334c      	adds	r3, #76	; 0x4c
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	4619      	mov	r1, r3
 8009082:	f7fc fbfa 	bl	800587a <USBD_LL_DataInStage>
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800909c:	4618      	mov	r0, r3
 800909e:	f7fc fd2e 	bl	8005afe <USBD_LL_SOF>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090b2:	2301      	movs	r3, #1
 80090b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	e008      	b.n	80090d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d102      	bne.n	80090d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80090cc:	2301      	movs	r3, #1
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	e001      	b.n	80090d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80090d2:	f7f7 fc4f 	bl	8000974 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090dc:	7bfa      	ldrb	r2, [r7, #15]
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fc fcce 	bl	8005a82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fc fc76 	bl	80059de <USBD_LL_Reset>
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800910a:	4618      	mov	r0, r3
 800910c:	f7fc fcc9 	bl	8005aa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6812      	ldr	r2, [r2, #0]
 800911e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <HAL_PCD_SuspendCallback+0x48>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	4a03      	ldr	r2, [pc, #12]	; (8009144 <HAL_PCD_SuspendCallback+0x48>)
 8009136:	f043 0306 	orr.w	r3, r3, #6
 800913a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	e000ed00 	.word	0xe000ed00

08009148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009156:	4618      	mov	r0, r3
 8009158:	f7fc fcb9 	bl	8005ace <USBD_LL_Resume>
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009176:	78fa      	ldrb	r2, [r7, #3]
 8009178:	4611      	mov	r1, r2
 800917a:	4618      	mov	r0, r3
 800917c:	f7fc fd11 	bl	8005ba2 <USBD_LL_IsoOUTIncomplete>
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fc fccd 	bl	8005b3e <USBD_LL_IsoINIncomplete>
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fc fd23 	bl	8005c06 <USBD_LL_DevConnected>
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fc fd20 	bl	8005c1c <USBD_LL_DevDisconnected>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	4608      	mov	r0, r1
 80091ee:	4611      	mov	r1, r2
 80091f0:	461a      	mov	r2, r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	70fb      	strb	r3, [r7, #3]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70bb      	strb	r3, [r7, #2]
 80091fa:	4613      	mov	r3, r2
 80091fc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800920c:	78bb      	ldrb	r3, [r7, #2]
 800920e:	883a      	ldrh	r2, [r7, #0]
 8009210:	78f9      	ldrb	r1, [r7, #3]
 8009212:	f7f9 fac6 	bl	80027a2 <HAL_PCD_EP_Open>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f8d3 	bl	80093c8 <USBD_Get_USB_Status>
 8009222:	4603      	mov	r3, r0
 8009224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009226:	7bbb      	ldrb	r3, [r7, #14]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7f9 fba4 	bl	800299c <HAL_PCD_EP_SetStall>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f8b4 	bl	80093c8 <USBD_Get_USB_Status>
 8009260:	4603      	mov	r3, r0
 8009262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009264:	7bbb      	ldrb	r3, [r7, #14]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f7f9 fbe9 	bl	8002a64 <HAL_PCD_EP_ClrStall>
 8009292:	4603      	mov	r3, r0
 8009294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f895 	bl	80093c8 <USBD_Get_USB_Status>
 800929e:	4603      	mov	r3, r0
 80092a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da0b      	bge.n	80092e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ce:	68f9      	ldr	r1, [r7, #12]
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	333e      	adds	r3, #62	; 0x3e
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	e00b      	b.n	80092f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	4613      	mov	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f7f9 fa18 	bl	8002758 <HAL_PCD_SetAddress>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f84a 	bl	80093c8 <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b086      	sub	sp, #24
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	460b      	mov	r3, r1
 8009350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009360:	7af9      	ldrb	r1, [r7, #11]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	f7f9 facf 	bl	8002908 <HAL_PCD_EP_Transmit>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f829 	bl	80093c8 <USBD_Get_USB_Status>
 8009376:	4603      	mov	r3, r0
 8009378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800937a:	7dbb      	ldrb	r3, [r7, #22]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	460b      	mov	r3, r1
 8009392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093a2:	7af9      	ldrb	r1, [r7, #11]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	f7f9 fa63 	bl	8002872 <HAL_PCD_EP_Receive>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f808 	bl	80093c8 <USBD_Get_USB_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d817      	bhi.n	800940c <USBD_Get_USB_Status+0x44>
 80093dc:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <USBD_Get_USB_Status+0x1c>)
 80093de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	080093f5 	.word	0x080093f5
 80093e8:	080093fb 	.word	0x080093fb
 80093ec:	08009401 	.word	0x08009401
 80093f0:	08009407 	.word	0x08009407
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
    break;
 80093f8:	e00b      	b.n	8009412 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093fa:	2303      	movs	r3, #3
 80093fc:	73fb      	strb	r3, [r7, #15]
    break;
 80093fe:	e008      	b.n	8009412 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009400:	2301      	movs	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
    break;
 8009404:	e005      	b.n	8009412 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009406:	2303      	movs	r3, #3
 8009408:	73fb      	strb	r3, [r7, #15]
    break;
 800940a:	e002      	b.n	8009412 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800940c:	2303      	movs	r3, #3
 800940e:	73fb      	strb	r3, [r7, #15]
    break;
 8009410:	bf00      	nop
  }
  return usb_status;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <__libc_init_array>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	4d0d      	ldr	r5, [pc, #52]	; (8009458 <__libc_init_array+0x38>)
 8009424:	4c0d      	ldr	r4, [pc, #52]	; (800945c <__libc_init_array+0x3c>)
 8009426:	1b64      	subs	r4, r4, r5
 8009428:	10a4      	asrs	r4, r4, #2
 800942a:	2600      	movs	r6, #0
 800942c:	42a6      	cmp	r6, r4
 800942e:	d109      	bne.n	8009444 <__libc_init_array+0x24>
 8009430:	4d0b      	ldr	r5, [pc, #44]	; (8009460 <__libc_init_array+0x40>)
 8009432:	4c0c      	ldr	r4, [pc, #48]	; (8009464 <__libc_init_array+0x44>)
 8009434:	f000 f8f2 	bl	800961c <_init>
 8009438:	1b64      	subs	r4, r4, r5
 800943a:	10a4      	asrs	r4, r4, #2
 800943c:	2600      	movs	r6, #0
 800943e:	42a6      	cmp	r6, r4
 8009440:	d105      	bne.n	800944e <__libc_init_array+0x2e>
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	f855 3b04 	ldr.w	r3, [r5], #4
 8009448:	4798      	blx	r3
 800944a:	3601      	adds	r6, #1
 800944c:	e7ee      	b.n	800942c <__libc_init_array+0xc>
 800944e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009452:	4798      	blx	r3
 8009454:	3601      	adds	r6, #1
 8009456:	e7f2      	b.n	800943e <__libc_init_array+0x1e>
 8009458:	080096dc 	.word	0x080096dc
 800945c:	080096dc 	.word	0x080096dc
 8009460:	080096dc 	.word	0x080096dc
 8009464:	080096e0 	.word	0x080096e0

08009468 <__retarget_lock_acquire_recursive>:
 8009468:	4770      	bx	lr

0800946a <__retarget_lock_release_recursive>:
 800946a:	4770      	bx	lr

0800946c <memcpy>:
 800946c:	440a      	add	r2, r1
 800946e:	4291      	cmp	r1, r2
 8009470:	f100 33ff 	add.w	r3, r0, #4294967295
 8009474:	d100      	bne.n	8009478 <memcpy+0xc>
 8009476:	4770      	bx	lr
 8009478:	b510      	push	{r4, lr}
 800947a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800947e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009482:	4291      	cmp	r1, r2
 8009484:	d1f9      	bne.n	800947a <memcpy+0xe>
 8009486:	bd10      	pop	{r4, pc}

08009488 <memset>:
 8009488:	4402      	add	r2, r0
 800948a:	4603      	mov	r3, r0
 800948c:	4293      	cmp	r3, r2
 800948e:	d100      	bne.n	8009492 <memset+0xa>
 8009490:	4770      	bx	lr
 8009492:	f803 1b01 	strb.w	r1, [r3], #1
 8009496:	e7f9      	b.n	800948c <memset+0x4>

08009498 <cleanup_glue>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	460c      	mov	r4, r1
 800949c:	6809      	ldr	r1, [r1, #0]
 800949e:	4605      	mov	r5, r0
 80094a0:	b109      	cbz	r1, 80094a6 <cleanup_glue+0xe>
 80094a2:	f7ff fff9 	bl	8009498 <cleanup_glue>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ae:	f000 b869 	b.w	8009584 <_free_r>
	...

080094b4 <_reclaim_reent>:
 80094b4:	4b2c      	ldr	r3, [pc, #176]	; (8009568 <_reclaim_reent+0xb4>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4283      	cmp	r3, r0
 80094ba:	b570      	push	{r4, r5, r6, lr}
 80094bc:	4604      	mov	r4, r0
 80094be:	d051      	beq.n	8009564 <_reclaim_reent+0xb0>
 80094c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80094c2:	b143      	cbz	r3, 80094d6 <_reclaim_reent+0x22>
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d14a      	bne.n	8009560 <_reclaim_reent+0xac>
 80094ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094cc:	6819      	ldr	r1, [r3, #0]
 80094ce:	b111      	cbz	r1, 80094d6 <_reclaim_reent+0x22>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 f857 	bl	8009584 <_free_r>
 80094d6:	6961      	ldr	r1, [r4, #20]
 80094d8:	b111      	cbz	r1, 80094e0 <_reclaim_reent+0x2c>
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 f852 	bl	8009584 <_free_r>
 80094e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094e2:	b111      	cbz	r1, 80094ea <_reclaim_reent+0x36>
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 f84d 	bl	8009584 <_free_r>
 80094ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80094ec:	b111      	cbz	r1, 80094f4 <_reclaim_reent+0x40>
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 f848 	bl	8009584 <_free_r>
 80094f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80094f6:	b111      	cbz	r1, 80094fe <_reclaim_reent+0x4a>
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 f843 	bl	8009584 <_free_r>
 80094fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009500:	b111      	cbz	r1, 8009508 <_reclaim_reent+0x54>
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f83e 	bl	8009584 <_free_r>
 8009508:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800950a:	b111      	cbz	r1, 8009512 <_reclaim_reent+0x5e>
 800950c:	4620      	mov	r0, r4
 800950e:	f000 f839 	bl	8009584 <_free_r>
 8009512:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009514:	b111      	cbz	r1, 800951c <_reclaim_reent+0x68>
 8009516:	4620      	mov	r0, r4
 8009518:	f000 f834 	bl	8009584 <_free_r>
 800951c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800951e:	b111      	cbz	r1, 8009526 <_reclaim_reent+0x72>
 8009520:	4620      	mov	r0, r4
 8009522:	f000 f82f 	bl	8009584 <_free_r>
 8009526:	69a3      	ldr	r3, [r4, #24]
 8009528:	b1e3      	cbz	r3, 8009564 <_reclaim_reent+0xb0>
 800952a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800952c:	4620      	mov	r0, r4
 800952e:	4798      	blx	r3
 8009530:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009532:	b1b9      	cbz	r1, 8009564 <_reclaim_reent+0xb0>
 8009534:	4620      	mov	r0, r4
 8009536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800953a:	f7ff bfad 	b.w	8009498 <cleanup_glue>
 800953e:	5949      	ldr	r1, [r1, r5]
 8009540:	b941      	cbnz	r1, 8009554 <_reclaim_reent+0xa0>
 8009542:	3504      	adds	r5, #4
 8009544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009546:	2d80      	cmp	r5, #128	; 0x80
 8009548:	68d9      	ldr	r1, [r3, #12]
 800954a:	d1f8      	bne.n	800953e <_reclaim_reent+0x8a>
 800954c:	4620      	mov	r0, r4
 800954e:	f000 f819 	bl	8009584 <_free_r>
 8009552:	e7ba      	b.n	80094ca <_reclaim_reent+0x16>
 8009554:	680e      	ldr	r6, [r1, #0]
 8009556:	4620      	mov	r0, r4
 8009558:	f000 f814 	bl	8009584 <_free_r>
 800955c:	4631      	mov	r1, r6
 800955e:	e7ef      	b.n	8009540 <_reclaim_reent+0x8c>
 8009560:	2500      	movs	r5, #0
 8009562:	e7ef      	b.n	8009544 <_reclaim_reent+0x90>
 8009564:	bd70      	pop	{r4, r5, r6, pc}
 8009566:	bf00      	nop
 8009568:	20000010 	.word	0x20000010

0800956c <__malloc_lock>:
 800956c:	4801      	ldr	r0, [pc, #4]	; (8009574 <__malloc_lock+0x8>)
 800956e:	f7ff bf7b 	b.w	8009468 <__retarget_lock_acquire_recursive>
 8009572:	bf00      	nop
 8009574:	200014e4 	.word	0x200014e4

08009578 <__malloc_unlock>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__malloc_unlock+0x8>)
 800957a:	f7ff bf76 	b.w	800946a <__retarget_lock_release_recursive>
 800957e:	bf00      	nop
 8009580:	200014e4 	.word	0x200014e4

08009584 <_free_r>:
 8009584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009586:	2900      	cmp	r1, #0
 8009588:	d044      	beq.n	8009614 <_free_r+0x90>
 800958a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800958e:	9001      	str	r0, [sp, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f1a1 0404 	sub.w	r4, r1, #4
 8009596:	bfb8      	it	lt
 8009598:	18e4      	addlt	r4, r4, r3
 800959a:	f7ff ffe7 	bl	800956c <__malloc_lock>
 800959e:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <_free_r+0x94>)
 80095a0:	9801      	ldr	r0, [sp, #4]
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	b933      	cbnz	r3, 80095b4 <_free_r+0x30>
 80095a6:	6063      	str	r3, [r4, #4]
 80095a8:	6014      	str	r4, [r2, #0]
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b0:	f7ff bfe2 	b.w	8009578 <__malloc_unlock>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d908      	bls.n	80095ca <_free_r+0x46>
 80095b8:	6825      	ldr	r5, [r4, #0]
 80095ba:	1961      	adds	r1, r4, r5
 80095bc:	428b      	cmp	r3, r1
 80095be:	bf01      	itttt	eq
 80095c0:	6819      	ldreq	r1, [r3, #0]
 80095c2:	685b      	ldreq	r3, [r3, #4]
 80095c4:	1949      	addeq	r1, r1, r5
 80095c6:	6021      	streq	r1, [r4, #0]
 80095c8:	e7ed      	b.n	80095a6 <_free_r+0x22>
 80095ca:	461a      	mov	r2, r3
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	b10b      	cbz	r3, 80095d4 <_free_r+0x50>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d9fa      	bls.n	80095ca <_free_r+0x46>
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	1855      	adds	r5, r2, r1
 80095d8:	42a5      	cmp	r5, r4
 80095da:	d10b      	bne.n	80095f4 <_free_r+0x70>
 80095dc:	6824      	ldr	r4, [r4, #0]
 80095de:	4421      	add	r1, r4
 80095e0:	1854      	adds	r4, r2, r1
 80095e2:	42a3      	cmp	r3, r4
 80095e4:	6011      	str	r1, [r2, #0]
 80095e6:	d1e0      	bne.n	80095aa <_free_r+0x26>
 80095e8:	681c      	ldr	r4, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	6053      	str	r3, [r2, #4]
 80095ee:	4421      	add	r1, r4
 80095f0:	6011      	str	r1, [r2, #0]
 80095f2:	e7da      	b.n	80095aa <_free_r+0x26>
 80095f4:	d902      	bls.n	80095fc <_free_r+0x78>
 80095f6:	230c      	movs	r3, #12
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	e7d6      	b.n	80095aa <_free_r+0x26>
 80095fc:	6825      	ldr	r5, [r4, #0]
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	428b      	cmp	r3, r1
 8009602:	bf04      	itt	eq
 8009604:	6819      	ldreq	r1, [r3, #0]
 8009606:	685b      	ldreq	r3, [r3, #4]
 8009608:	6063      	str	r3, [r4, #4]
 800960a:	bf04      	itt	eq
 800960c:	1949      	addeq	r1, r1, r5
 800960e:	6021      	streq	r1, [r4, #0]
 8009610:	6054      	str	r4, [r2, #4]
 8009612:	e7ca      	b.n	80095aa <_free_r+0x26>
 8009614:	b003      	add	sp, #12
 8009616:	bd30      	pop	{r4, r5, pc}
 8009618:	200014e8 	.word	0x200014e8

0800961c <_init>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr

08009628 <_fini>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr
